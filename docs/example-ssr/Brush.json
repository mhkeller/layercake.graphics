{"main":{"title":"index.svelte","contents":"<script>\n  import { LayerCake, ScaledSvg, Html } from 'layercake';\n\n  import Line from './components/Line.svelte';\n  import Area from './components/Area.svelte';\n  import AxisX from './components/AxisX.html.svelte';\n  import AxisY from './components/AxisY.html.svelte';\n  import Brush from './components/Brush.html.svelte';\n\n  // This example loads csv data as json using @rollup/plugin-dsv\n  import data from './data/points.csv';\n\n  let brushExtents = [null, null];\n\n  const xKey = 'myX';\n  const yKey = 'myY';\n\n  data.forEach(d => {\n    d[yKey] = +d[yKey];\n  });\n\n  let brushedData;\n  $: {\n    brushedData = data.slice((brushExtents[0] || 0) * data.length, (brushExtents[1] || 1) * data.length);\n    if (brushedData.length < 2) {\n      brushedData = data.slice(brushExtents[0] * data.length, brushExtents[0] * data.length + 2)\n    }\n  }\n</script>\n\n<style>\n  /*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the <LayerCake> element will\n    expand to fill it.\n  */\n  .chart-container {\n    width: 100%;\n    height: 80%;\n  }\n  .brush-container {\n    width: 100%;\n    height: 20%;\n  }\n</style>\n\n<div class=\"chart-container\">\n  <LayerCake\n    ssr={true}\n    percentRange={true}\n    padding={{ right: 10, bottom: 20, left: 25 }}\n    x={xKey}\n    y={yKey}\n    yDomain={[0, null]}\n    data={brushedData}\n  >\n    <Html>\n      <AxisX\n        ticks={ticks => {\n          const filtered = ticks.filter(t => t % 1 === 0);\n          if (filtered.length > 7) {\n            return filtered.filter((t, i) => i % 2 === 0);\n          }\n          return filtered;\n        }}\n      />\n      <AxisY\n        ticks={4}\n      />\n    </Html>\n    <ScaledSvg>\n      <Line\n        stroke='#00e047'\n      />\n      <Area\n        fill='#00e04710'\n      />\n    </ScaledSvg>\n  </LayerCake>\n</div>\n\n<div class=\"brush-container\">\n  <LayerCake\n    ssr={true}\n    percentRange={true}\n    padding={{ top: 5 }}\n    x={xKey}\n    y={yKey}\n    yDomain={[0, null]}\n    data={data}\n  >\n    <ScaledSvg>\n      <Line\n        stroke='#00e047'\n      />\n      <Area\n        fill='#00e04710'\n      />\n    </ScaledSvg>\n    <Html>\n      <Brush bind:min={brushExtents[0]} bind:max={brushExtents[1]}/>\n    </Html>\n  </LayerCake>\n</div>"},"dek":"","components":[{"title":"./components/Line.svelte","contents":"<script>\n  /**\n    Generates an SVG area shape using the `area` function from [d3-shape](https://github.com/d3/d3-shape).\n    @type {String} [stroke='#ab00d6'] – The shape's fill color. This is technically optional because it comes with a default value but you'll likely want to replace it with your own color.\n  */\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet } = getContext('LayerCake');\n\n  export let stroke = '#ab00d6';\n\n  $: path = 'M' + $data\n    .map(d => {\n      return $xGet(d) + ',' + $yGet(d);\n    })\n    .join('L');\n</script>\n\n<path class='path-line' d='{path}' {stroke}></path>\n\n<style>\n  .path-line {\n    fill: none;\n    stroke-linejoin: round;\n    stroke-linecap: round;\n    stroke-width: 2;\n  }\n</style>"},{"title":"./components/Area.svelte","contents":"<script>\n  /**\n    Generates an SVG area shape manually constructing the SVG path.\n    @type {String} [fill='#ab00d610'] – The shape's fill color. This is technically optional because it comes with a default value but you'll likely want to replace it with your own color.\n  */\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet, xScale, yScale, extents } = getContext('LayerCake');\n\n  export let fill = '#ab00d610';\n\n  $: path = 'M' + $data\n    .map(d => {\n      return $xGet(d) + ',' + $yGet(d);\n    })\n    .join('L');\n\n  let area;\n\n  $: {\n    const yRange = $yScale.range();\n    area = path + (\n      'L' + $xScale($extents.x ? $extents.x[1] : 0) + ',' + yRange[0] +\n      'L' + $xScale($extents.x ? $extents.x[0] : 0) + ',' + yRange[0] +\n      'Z'\n    );\n  }\n</script>\n\n<path class='path-area' d='{area}' {fill}></path>"},{"title":"./components/AxisX.html.svelte","contents":"<script>\n  /**\n    Generates an HTML x-axis, useful for server-side rendered charts.  This component is also configured to detect if your x-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.\n    @type {Boolean} [gridlines=true] – Extend lines from the ticks into the chart space.\n    @type {Boolean} [tickMarks=false] – Show a vertical mark for each tick.\n    @type {Boolean} [baseline=false] – Show a solid line at the bottom.\n    @type {Boolean} [snapTicks=false] – Instead of centering the text on the first and the last items, align them to the edges of the chart.\n    @type {Function} [formatTick=d => d] – A function that passes the current tick value and expects a nicely formatted value in return.\n    @type {Number|Array|Function} [ticks] – If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. If nothing, it uses the default ticks supplied by the D3 function.\n    @type {Number} [yTick=7] – The distance from the baseline to place each tick value, in pixels.\n  */\n  import { getContext } from 'svelte';\n\n  const { xScale } = getContext('LayerCake');\n\n  export let gridlines = true;\n  export let tickMarks = false;\n  export let baseline = false;\n  export let snapTicks = false;\n  export let formatTick = d => d;\n  export let ticks = undefined;\n  export let yTick = 7;\n\n  $: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $xScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($xScale.ticks()) :\n          $xScale.ticks(ticks);\n</script>\n\n<div class='axis x-axis' class:snapTicks>\n  {#each tickVals as tick, i}\n    {#if gridlines !== false}\n      <div class=\"gridline\" style='left:{$xScale(tick)}%;top: 0px;bottom: 0;'></div>\n    {/if}\n    {#if tickMarks === true}\n      <div class=\"tick-mark\" style='left:{$xScale(tick) + (isBandwidth ? $xScale.bandwidth() / 2 : 0)}%;height:6px;bottom: -6px;'></div>\n    {/if}\n    <div\n      class='tick tick-{ i }'\n      style='left:{$xScale(tick) + (isBandwidth ? $xScale.bandwidth() / 2 : 0)}%;top:100%;'>\n      <div\n        class=\"text\"\n        style='top:{(yTick)}px;'>{formatTick(tick)}</div>\n    </div>\n  {/each}\n  {#if baseline === true}\n    <div class=\"baseline\" style='top: 100%;width: 100%;'></div>\n  {/if}\n</div>\n\n<style>\n  .axis,\n  .tick,\n  .tick-mark,\n  .gridline,\n  .baseline {\n    position: absolute;\n  }\n  .axis {\n    width: 100%;\n    height: 100%;\n  }\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .gridline {\n    border-left: 1px dashed #aaa;\n  }\n\n  .tick-mark {\n    border-left: 1px solid #aaa;\n  }\n  .baseline {\n    border-top: 1px solid #aaa;\n  }\n\n  .tick .text {\n    color: #666;\n    position: relative;\n    white-space: nowrap;\n    transform: translateX(-50%);\n  }\n  /* This looks a little better at 40 percent than 50 */\n  .axis.snapTicks .tick:last-child {\n    transform: translateX(-40%);\n  }\n  .axis.snapTicks .tick.tick-0 {\n    transform: translateX(40%);\n  }\n</style>"},{"title":"./components/AxisY.html.svelte","contents":"<script>\n  /**\n    Generates an HTML y-axis.\n    @type {Boolean} [gridlines=true] – Extend lines from the ticks into the chart space\n    @type {Boolean} [tickMarks=false] – Show a vertical mark for each tick.\n    @type {Boolean} [baseline=false] – Show a solid line at the bottom.\n    @type {Function} [formatTick=d => d] – A function that passes the current tick value and expects a nicely formatted value in return.\n    @type {Number|Array|Function} [ticks=4] – If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return.\n    @type {Number} [xTick=-4] – How far over to position the text marker.\n    @type {Number} [yTick=-1] – How far up and down to position the text marker.\n  */\n  import { getContext } from 'svelte';\n\n  const { padding, xRange, yScale } = getContext('LayerCake');\n\n  export let gridlines = true;\n  export let tickMarks = false;\n  export let baseline = false;\n  export let formatTick = d => d;\n  export let ticks = 4;\n  export let xTick = -4;\n  export let yTick = -1;\n  // export let textAnchor = 'start';\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $yScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($yScale.ticks()) :\n          $yScale.ticks(ticks);\n</script>\n\n<div class='axis y-axis' style='transform:translate(-{$padding.left}px, 0)'>\n  {#each tickVals as tick, i}\n    <div class='tick tick-{i}' style='top:{$yScale(tick) + (isBandwidth ? $yScale.bandwidth () / 2 : 0)}%;left:{$xRange[0]}%;'>\n      {#if gridlines !== false}\n        <div class=\"gridline\" style='top:0;left:{isBandwidth ? $padding.left : 0}px;right:-{$padding.left + $padding.right}px;'></div>\n      {/if}\n      {#if baseline !== false && i === 0}\n        <div class=\"gridline baseline\" style='top:0;left:{isBandwidth ? $padding.left : 0};right:-{$padding.left + $padding.right}px;'></div>\n      {/if}\n      {#if tickMarks === true}\n        <div class=\"tick-mark\" style='top:0;left:{isBandwidth ? $padding.left - 6 : 0}px;width:6px;'></div>\n      {/if}\n      <div\n        class=\"text\"\n        style='\n          top:{yTick}px;\n          left:{isBandwidth ? ($padding.left + xTick - 4) : 0}px;\n          transform: translate({isBandwidth ? '-100%' : 0}, {isBandwidth ? -50 - Math.floor($yScale.bandwidth() / -2) : '-100'}%);\n        '\n      >{formatTick(tick)}</div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .axis,\n  .tick,\n  .tick-mark,\n  .gridline,\n  .baseline,\n  .text {\n    position: absolute;\n  }\n  .axis {\n    width: 100%;\n    height: 100%;\n  }\n  .tick {\n    font-size: 12px;\n    width: 100%;\n    font-weight: 100;\n  }\n\n  .gridline {\n    border-top: 1px dashed #aaa;\n  }\n  .tick-mark {\n    border-top: 1px solid #aaa;\n  }\n\n  .baseline.gridline {\n    border-top-style: solid;\n  }\n\n  .tick .text {\n    color: #666;\n  }\n</style>"},{"title":"./components/Brush.html.svelte","contents":"<script>\n  /**\n    Adds a brush component to create a range between 0 and 1. Bind to the `min` and `max` props to use them in other components. See the [brushable example](https://layercake.graphcics/example/Brush) for use.\n    @type {Number} min – The brush's min value.\n    @type {Number} max – The brush's max value.\n  */\n  import { clamp } from 'yootils';\n\n  export let min;\n  export let max;\n\n  let brush;\n\n  const p = x => {\n    const { left, right } = brush.getBoundingClientRect();\n    return clamp((x - left) / (right - left), 0, 1);\n  };\n\n  const handler = fn => {\n    return e => {\n      if (e.type === 'touchstart') {\n        if (e.touches.length !== 1) return;\n        e = e.touches[0];\n      }\n\n      const id = e.identifier;\n      const start = { min, max, p: p(e.clientX) };\n\n      const handle_move = e => {\n        if (e.type === 'touchmove') {\n          if (e.changedTouches.length !== 1) return;\n          e = e.changedTouches[0];\n          if (e.identifier !== id) return;\n        }\n\n        fn(start, p(e.clientX));\n      };\n\n      const handle_end = e => {\n        if (e.type === 'touchend') {\n          if (e.changedTouches.length !== 1) return;\n          if (e.changedTouches[0].identifier !== id) return;\n        } else if (e.target === brush) {\n          clear();\n        }\n\n        window.removeEventListener('mousemove', handle_move);\n        window.removeEventListener('mouseup', handle_end);\n\n        window.removeEventListener('touchmove', handle_move);\n        window.removeEventListener('touchend', handle_end);\n      };\n\n      window.addEventListener('mousemove', handle_move);\n      window.addEventListener('mouseup', handle_end);\n\n      window.addEventListener('touchmove', handle_move);\n      window.addEventListener('touchend', handle_end);\n    };\n  };\n\n  const clear = () => {\n    min = null;\n    max = null;\n  }\n\n  const reset = handler((start, p) => {\n    min = clamp(Math.min(start.p, p), 0, 1);\n    max = clamp(Math.max(start.p, p), 0, 1);\n  });\n\n  const move = handler((start, p) => {\n    const d = clamp(p - start.p, -start.min, 1 - start.max);\n    min = start.min + d;\n    max = start.max + d;\n  });\n\n  const adjust_min = handler((start, p) => {\n    min = p > start.max ? start.max : p;\n    max = p > start.max ? p : start.max;\n  });\n\n  const adjust_max = handler((start, p) => {\n    min = p < start.min ? p : start.min;\n    max = p < start.min ? start.min : p;\n  });\n\n  $: left = 100 * min;\n  $: right = 100 * (1 - max);\n</script>\n\n<div bind:this={brush} class=\"brush-outer\" on:mousedown|stopPropagation={reset} on:touchstart|stopPropagation={reset}>\n  {#if min !== null}\n    <div class=\"brush-inner\" on:mousedown|stopPropagation={move} on:touchstart|stopPropagation={move} style=\"left: {left}%; right: {right}%\"></div>\n    <div class=\"brush-handle\" on:mousedown|stopPropagation={adjust_min} on:touchstart|stopPropagation={adjust_min} style=\"left: {left}%\"></div>\n    <div class=\"brush-handle\" on:mousedown|stopPropagation={adjust_max} on:touchstart|stopPropagation={adjust_max} style=\"right: {right}%\"></div>\n  {/if}\n</div>\n\n<style>\n  .brush-outer {\n    position: relative;\n    width: 100%;\n    height: calc(100% + 5px);\n    top: -5px;\n  }\n\n  .brush-inner {\n    position: absolute;\n    height: 100%;\n    cursor: move;\n    /* mix-blend-mode: difference; */\n    background-color: #cccccc90;\n    /* border: 1px solid #000; */\n  }\n\n  .brush-handle {\n    position: absolute;\n    width: 0;\n    height: 100%;\n    cursor: ew-resize;\n  }\n\n  .brush-handle::before {\n    position: absolute;\n    content: '';\n    width: 8px;\n    left: -4px;\n    height: 100%;\n    background: transparent;\n  }\n</style>"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[{"title":"./data/points.csv","contents":"myX,myY\n1979,7.19\n1980,7.83\n1981,7.24\n1982,7.44\n1983,7.51\n1984,7.1\n1985,6.91\n1986,7.53\n1987,7.47\n1988,7.48\n1989,7.03\n1990,6.23\n1991,6.54\n1992,7.54\n1993,6.5\n1994,7.18\n1995,6.12\n1996,7.87\n1997,6.73\n1998,6.55\n1999,6.23\n2000,6.31\n2001,6.74\n2002,5.95\n2003,6.13\n2004,6.04\n2005,5.56\n2006,5.91\n2007,4.29\n2008,4.72\n2009,5.38\n2010,4.92\n2011,4.61\n2012,3.62\n2013,5.35\n2014,5.28\n2015,4.63\n2016,4.72"}],"jsons":[]}