{"main":{"slug":"Radar.svelte","contents":"<script>\n  /**\n    Generates an SVG radar chart.\n  */\n  import { getContext } from 'svelte';\n  import { line, curveCardinalClosed } from 'd3-shape';\n\n  const { data, width, height, xGet, config } = getContext('LayerCake');\n\n  $: angleSlice = (Math.PI * 2) / $config.x.length;\n\n  $: path = line()\n    .curve(curveCardinalClosed)\n    .x((d, i) => d * Math.cos(angleSlice * i - Math.PI / 2))\n    .y((d, i) => d * Math.sin(angleSlice * i - Math.PI / 2));\n\n  $: cx = (circleR, i) => circleR * Math.cos(angleSlice * i - Math.PI / 2)\n  $: cy = (circleR, i) => circleR * Math.sin(angleSlice * i - Math.PI / 2)\n\n  /* The non-D3 line generator way. */\n  // $: path = valus => 'M' + values\n  //   .map(d => {\n  //     return $rGet(d).map((val, i) => {\n  //       return [\n  //         val * Math.cos(angleSlice * i - Math.PI / 2),\n  //         val * Math.sin(angleSlice * i - Math.PI / 2)\n  //       ].join(',');\n  //     });\n  //   })\n  //   .join('L') + 'z';\n</script>\n\n<g\n  transform=\"translate({ $width / 2 }, { $height / 2 })\"\n>\n  {#each $data as row}\n    <!-- Draw a line connecting all the dots -->\n    <path\n      class='path-line'\n      d='{path($xGet(row))}'\n      stroke=\"#f0c\"\n      fill=\"#f0c\"\n      fill-opacity=\"0.5\"\n    ></path>\n\n    <!-- Plot each dots -->\n    {#each $xGet(row) as circleR, i}\n      <circle\n        cx={cx(circleR, i)}\n        cy={cy(circleR, i)}\n        r=\"4.5\"\n        fill=\"#f0c\"\n        stroke=\"#fff\"\n        stroke-width=\"1\"\n      ></circle>\n    {/each}\n  {/each}\n</g>\n\n<style>\n  .path-line {\n    stroke-linejoin: round;\n    stroke-linecap: round;\n    stroke-width: 2;\n  }\n</style>"},"dek":"","usedIn":[{"group":"Regular","matches":["/example/Radar"]},{"group":"SSR","matches":["/example-ssr/Radar"]}],"jsdocParsed":{"description":"Generates an SVG radar chart.","tags":[]}}