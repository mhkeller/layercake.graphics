{"main":{"slug":"SharedTooltip.html.svelte","contents":"<script>\n  /**\n    Generates a tooltip that works on multiseries datasets, like multiline charts. It creates a tooltip showing the name of the series and the current value. It finds the nearest data point using the [QuadTree.html.svelte](https://layercake.graphics/components/QuadTree.html.svelte) component.\n    @type {Function} [formatTitle=d => d] – A function to format the tooltip title, which is `$config.x`.\n    @type {Function} [formatKey=d => titleCase(d)] – A function to format the series name.\n    @type {Function} [formatValue=d => isNaN(+d) ? d : commas(d)] – A function to format the value.\n    @type {Array} [dataset=$data] – The dataset to work off of. You can pass something custom in here in case you don't want to use the main data or it's in a strange format.\n    @type {Number} [offset=20] – A negative y-offset from the hover point, in pixels.\n    */\n  import { getContext } from 'svelte';\n  import { format } from 'd3-format';\n\n  import QuadTree from './QuadTree.html.svelte';\n\n  const { data, width, yScale, config } = getContext('LayerCake');\n\n  const commas = format(',');\n  const titleCase = d => d.replace(/^\\w/, w => w.toUpperCase());\n\n  export let offset = 20;\n  export let dataset = $data;\n  export let formatTitle = d => d;\n  export let formatKey = d => titleCase(d);\n  export let formatValue = d => isNaN(+d) ? d : commas(d);\n\n  const w = 150;\n  const w2 = w / 2;\n\n  /* --------------------------------------------\n   * Sort the keys by the highest value\n   */\n  function sortResult(result) {\n    if (Object.keys(result).length === 0) return [];\n    const rows = Object.keys(result).filter(d => d !== $config.x).map(key => {\n      return {\n        key,\n        value: result[key]\n      };\n    }).sort((a, b) => b.value - a.value);\n\n    return rows;\n  }\n</script>\n\n<style>\n  .tooltip {\n    position: absolute;\n    font-size: 13px;\n    pointer-events: none;\n    border: 1px solid #ccc;\n    background: rgba(255, 255, 255, 0.85);\n    transform: translate(-50%, -100%);\n    padding: 5px;\n    z-index: 15;\n    pointer-events: none;\n  }\n  .line {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    width: 1px;\n    border-left: 1px dotted #666;\n    pointer-events: none;\n  }\n  .tooltip,\n  .line {\n    transition: left 250ms ease-out, top 250ms ease-out;\n  }\n  .title {\n    font-weight: bold;\n  }\n  .key {\n    color: #999;\n  }\n</style>\n\n<QuadTree\n  dataset={dataset}\n  y='x'\n  let:x\n  let:y\n  let:visible\n  let:found\n  let:e\n>\n  {#if visible === true}\n    <div\n      style=\"left:{x}px;\"\n      class=\"line\"></div>\n    <div\n      class=\"tooltip\"\n      style=\"\n        width:{w}px;\n        display: { visible ? 'block' : 'none' };\n        top:{$yScale(sortResult(found)[0].value) - offset}px;\n        left:{Math.min(Math.max(w2, x), $width - w2)}px;\"\n      >\n        <div class=\"title\">{formatTitle(found[$config.x])}</div>\n        {#each sortResult(found) as row}\n          <div class=\"row\"><span class=\"key\">{formatKey(row.key)}:</span> {formatValue(row.value)}</div>\n        {/each}\n    </div>\n  {/if}\n</QuadTree>"},"dek":"","usedIn":[{"group":"Regular","matches":["/example/MultiLine"]},{"group":"SSR","matches":[]}],"jsdocParsed":{"description":"Generates a tooltip that works on multiseries datasets, like multiline charts. It creates a tooltip showing the name of the series and the current value. It finds the nearest data point using the [QuadTree.html.svelte](https://layercake.graphics/components/QuadTree.html.svelte) component.","tags":[{"title":"param","description":"– A function to format the tooltip title, which is `$config.x`.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"formatTitle","default":"d=>d"},{"title":"param","description":"– A function to format the series name.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"formatKey","default":"d=>titleCase(d)"},{"title":"param","description":"– A function to format the value.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"formatValue","default":"d=>isNaN(+d)?d:commas(d)"},{"title":"param","description":"– The dataset to work off of. You can pass something custom in here in case you don't want to use the main data or it's in a strange format.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Array"}},"name":"dataset","default":"$data"},{"title":"param","description":"– A negative y-offset from the hover point, in pixels.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"offset","default":"20"}]}}
