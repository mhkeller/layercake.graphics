{"main":{"slug":"Arrows.svelte","contents":"<script>\n  /**\n    Adds SVG swoopy arrows based on a config object. It attaches arrows to divs, which are created by another component such as [Annotations.html.svelte](https://layercake.graphics/components/Annotations.html.svelte).\n    @type {Array} [annotations=[]] – A list of annotation objects. See the [Column](https://layercake.graphics/example/Column) chart example for the schema and options.\n    @type {String} [annotationClass='.layercake-annotation'] – The class name of the text annotation divs.\n    @type {String} [containerClass='.chart-container'] – The class name / CSS selector of the parent element of the `<LayerCake>` component. This is used to crawl the DOM for the text annotations.\n  */\n  import { getContext, onMount } from 'svelte';\n\n  import { swoopyArrow, getElPosition, parseCssValue } from '../modules/arrowUtils.js';\n\n  export let annotations = [];\n  export let containerClass = '.chart-container';\n  export let annotationClass = '.layercake-annotation';\n\n  let container;\n\n  // If you're loading this component via sapper or another multi-page app\n  // you will likely need to set an explicit path to the svg marker definition\n  // for Safari compatibility. See https://github.com/sveltejs/svelte/issues/3450\n  // Otherwise, you can remove this variable from here and from the template below\n  $: basePath = typeof window !== 'undefined' ? window.location.href : '';\n\n  const { width, height } = getContext('LayerCake');\n\n  /* --------------------------------------------\n   * Some lookups to convert between x, y / width, height terminology\n   * and CSS names\n   */\n  const lookups = [\n    { dimension: 'width', css: 'left', position: 'x' },\n    { dimension: 'height', css: 'top', position: 'y' }\n  ];\n\n  let d = () => '';\n  let annotationEls;\n\n  // This searches the DOM for the HTML annotations\n  // in the Annotations.svelte componenent and then\n  // attaches arrows to those divs\n  // Make sure the `.chart-container` and `.layercake-annotation`\n  // selectors match what you have in your project\n  // otherwise it won't find anything\n  onMount(() => {\n    annotationEls = Array.from(\n      container.closest(containerClass)\n        .querySelectorAll(annotationClass)\n    );\n  });\n\n  function setPath (w, h) {\n    return (anno, i, arrow) => {\n      const el = annotationEls[i];\n\n      /* --------------------------------------------\n       * Parse our attachment directives to know where to start the arrowhead\n       * measuring a bounding box based on our annotation el\n       */\n      const arrowSource = getElPosition(el);\n      const sourceCoords = arrow.source.anchor.split('-').map((q, j) => {\n        const point = q === 'middle' ? arrowSource[lookups[j].css] + (arrowSource[lookups[j].dimension] / 2) : arrowSource[q];\n        return point + (parseCssValue(arrow.source[`d${lookups[j].position}`], i, arrowSource.width, arrowSource.height));\n      });\n\n      /* --------------------------------------------\n       * Default to clockwise\n       */\n      const clockwise = typeof arrow.clockwise === 'undefined' ? true : arrow.clockwise;\n\n      /* --------------------------------------------\n       * Parse where we're drawing to\n       */\n      const targetCoords = [arrow.target.x, arrow.target.y].map((q, j) => {\n        return parseCssValue(q, j, w, h);\n      });\n\n      /* --------------------------------------------\n       * Create arrow path\n       */\n      return swoopyArrow()\n        .angle(Math.PI / 2)\n        .clockwise(clockwise)\n        .x(q => q[0])\n        .y(q => q[1])([sourceCoords, targetCoords]);\n    };\n  }\n\n  $: if (annotationEls && annotationEls.length) d = setPath($width, $height);\n</script>\n\n<g bind:this={container}>\n{#if annotations.length}\n  <g class=\"swoops\">\n    {#each annotations as anno, i}\n      {#if anno.arrows}\n        {#each anno.arrows as arrow}\n          <path\n            marker-end='url({ basePath }#arrowhead)'\n            d='{d(anno, i, arrow)}'></path>\n        {/each}\n      {/if}\n    {/each}\n  </g>\n{/if}\n</g>\n\n<style>\n  .swoops {\n    position: absolute;\n    max-width: 200px;\n    line-height: 14px;\n  }\n  .swoops path {\n    fill: none;\n    stroke: #000;\n    stroke-width: 1;\n  }\n</style>"},"dek":"","usedIn":[{"group":"Regular","matches":["/example/Column"]},{"group":"SSR","matches":["/example-ssr/Column"]}],"jsdocParsed":{"description":"Adds SVG swoopy arrows based on a config object. It attaches arrows to divs, which are created by another component such as [Annotations.html.svelte](https://layercake.graphics/components/Annotations.html.svelte).","tags":[{"title":"param","description":"– A list of annotation objects. See the [Column](https://layercake.graphics/example/Column) chart example for the schema and options.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Array"}},"name":"annotations","default":"[]"},{"title":"param","description":"– The class name of the text annotation divs.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"annotationClass","default":"'.layercake-annotation'"},{"title":"param","description":"– The class name / CSS selector of the parent element of the `<LayerCake>` component. This is used to crawl the DOM for the text annotations.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"containerClass","default":"'.chart-container'"}]}}