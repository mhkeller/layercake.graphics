{"main":{"slug":"BeeswarmForce.html.svelte","contents":"<script>\n  /**\n    Generates an HTML Beeswarm chart using a [d3-force simulation](https://github.com/d3/d3-force).\n    @type {Number} [r=4] – The circle radius size in pixels.\n    @type {Number} [strokeWidth=0.5] – The circle's stroke width in pixels.\n    @type {String} [stroke='#fff'] – The circle's stroke color.\n    @type {Number} [xStrength=0.95] – The value passed into the `.strength` method on `forceX`, which is used as the `'x'` property on the simulation. See [the documentation](https://github.com/d3/d3-force#x_strength) for more.\n    @type {Number} [yStrength=0.075] – The value passed into the `.strength` method on `forceY`, which is used as the `'y'` property on the simulation. See [the documentation](https://github.com/d3/d3-force#y_strength) for more.\n  */\n  import { getContext } from 'svelte';\n  import { forceSimulation, forceX, forceY, forceCollide } from 'd3-force';\n\n  const { data, xGet, height, zGet, custom } = getContext('LayerCake');\n\n  const nodes = $data.map((d) => ({ ...d }));\n\n  export let r = 4;\n  export let strokeWidth = 0.5;\n  export let stroke = '#fff';\n  export let xStrength = 0.95;\n  export let yStrength = 0.075;\n\n  $: simulation = forceSimulation(nodes)\n    .force('x', forceX().x(d => $xGet(d)).strength(xStrength))\n    .force('y', forceY().y($height / 2).strength(yStrength))\n    .force('collide', forceCollide(r + strokeWidth / 2))\n    .stop();\n\n  $: {\n    for ( var i = 0,\n      n = Math.ceil(Math.log(simulation.alphaMin()) / Math.log(1 - simulation.alphaDecay()));\n      i < n;\n      ++i ) {\n      simulation.tick();\n    }\n  }\n</script>\n\n<div class='bee-group'>\n  {#each simulation.nodes() as node}\n    <div\n      class='bee'\n      style='\n        left:{node.x}px;\n        top: {node.y}px;\n        width: {r * 2}px;\n        height: {r * 2}px;\n        background: {$zGet(node)};\n        border-width: {strokeWidth}px;\n        border-color: {stroke};\n        '\n    >\n      <title>{$custom.getTitle(node)}</title>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .bee {\n    position: absolute;\n    border-style: solid;\n    border-radius: 50%;\n    transform: translate(-50%, -50%);\n  }\n</style>"},"dek":"","usedIn":[{"group":"Regular","matches":[]},{"group":"SSR","matches":[]}],"jsdocParsed":{"description":"Generates an HTML Beeswarm chart using a [d3-force simulation](https://github.com/d3/d3-force).","tags":[{"title":"type","description":"[r=4] – The circle radius size in pixels.","type":{"type":"NameExpression","name":"Number"}},{"title":"type","description":"[strokeWidth=0.5] – The circle's stroke width in pixels.","type":{"type":"NameExpression","name":"Number"}},{"title":"type","description":"[stroke='#fff'] – The circle's stroke color.","type":{"type":"NameExpression","name":"String"}},{"title":"type","description":"[xStrength=0.95] – The value passed into the `.strength` method on `forceX`, which is used as the `'x'` property on the simulation. See [the documentation](https://github.com/d3/d3-force#x_strength) for more.","type":{"type":"NameExpression","name":"Number"}},{"title":"type","description":"[yStrength=0.075] – The value passed into the `.strength` method on `forceY`, which is used as the `'y'` property on the simulation. See [the documentation](https://github.com/d3/d3-force#y_strength) for more.","type":{"type":"NameExpression","name":"Number"}}]}}