{"main":{"slug":"MapPoints.svelte","contents":"<script>\n  /**\n    Generates canvas dots onto a map using [d3-geo](https://github.com/d3/d3-geo).\n    @type {Function} projection – A D3 projection function. Pass this in as an uncalled function, e.g. `projection={geoAlbersUsa}`.\n    @type {Array} [features=$data.features] – A list of GeoJSOn features. By default, assumes `$data` is a GeoJSON Feature Collection and uses those features.\n    @type {Number} [r=3.5] – The point's radius.\n    @type {String} [fill='yellow'] – The point's fill color.\n    @type {String} [stroke='#000'] – The point's stroke color.\n    @type {Number} [strokeWidth=1] – The point's stroke width.\n  */\n  import { getContext } from 'svelte';\n\n  const { data, width, height } = getContext('LayerCake');\n\n  /* --------------------------------------------\n   * Require a D3 projection function\n   */\n  export let projection;\n  export let features = $data.features;\n  export let r = 3.5;\n  export let fill = 'yellow';\n  export let stroke = '#000';\n  export let strokeWidth = 1;\n  export let opacity = 1;\n\n  $: projectionFn = projection()\n    .fitSize([$width, $height], $data);\n</script>\n\n<g class=\"points\">\n{#each features as d}\n  <!-- To scale the circle by size, set r to `$rGet(d.properties)` -->\n  <circle\n    cx={projectionFn(d.geometry.coordinates)[0]}\n    cy={projectionFn(d.geometry.coordinates)[1]}\n    r=\"{r}\"\n    fill=\"{fill}\"\n    stroke=\"{stroke}\"\n    stroke-width=\"{strokeWidth}\"\n    opacity=\"{opacity}\"\n  />\n{/each}\n</g>"},"dek":"","usedIn":[{"group":"Regular","matches":[]},{"group":"SSR","matches":[]}],"jsdocParsed":{"description":"Generates canvas dots onto a map using [d3-geo](https://github.com/d3/d3-geo).","tags":[{"title":"type","description":"projection – A D3 projection function. Pass this in as an uncalled function, e.g. `projection={geoAlbersUsa}`.","type":{"type":"NameExpression","name":"Function"}},{"title":"type","description":"[features=$data.features] – A list of GeoJSOn features. By default, assumes `$data` is a GeoJSON Feature Collection and uses those features.","type":{"type":"NameExpression","name":"Array"}},{"title":"type","description":"[r=3.5] – The point's radius.","type":{"type":"NameExpression","name":"Number"}},{"title":"type","description":"[fill='yellow'] – The point's fill color.","type":{"type":"NameExpression","name":"String"}},{"title":"type","description":"[stroke='#000'] – The point's stroke color.","type":{"type":"NameExpression","name":"String"}},{"title":"type","description":"[strokeWidth=1] – The point's stroke width.","type":{"type":"NameExpression","name":"Number"}}]}}