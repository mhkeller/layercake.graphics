{"main":{"slug":"Map.canvas.svelte","contents":"<script>\n  /**\n    Generates a canvas map using the `geoPath` function from [d3-geo](https://github.com/d3/d3-geo).\n    @type {Function} projection – A D3 projection function. Pass this in as an uncalled function, e.g. `projection={geoAlbersUsa}`.\n    @type {GeoJsonFeatureCollection} [features=$data.features] – A GeoJSON feature collection that has an array of features on its `features` key. Use this if you want to draw a subset of the features in `$data` while keeping the zoom on the whole GeoJSON feature set. By default, it plots everything in `$data`.\n    @type {String} [stroke='#ccc'] – The shape's stroke color.\n    @type {Number} [strokeWidth=1] – The shape's stroke width.\n    @type {String} [fill='#fff'] – The shape's fill color.\n  */\n  import { getContext } from 'svelte';\n  import { scaleCanvas } from 'layercake';\n  import { geoPath } from 'd3-geo';\n\n  const { data, width, height, zGet } = getContext('LayerCake');\n\n  const { ctx } = getContext('canvas');\n\n  export let projection;\n  export let stroke = '#ccc';\n  export let strokeWidth = 1;\n  export let fill = '#fff';\n  export let features = $data;\n\n  $: projectionFn = projection()\n    .fitSize([$width, $height], $data);\n\n  $: geoPathFn = geoPath(projectionFn);\n\n  $: {\n    if ($ctx && geoPath) {\n      scaleCanvas($ctx, $width, $height);\n      $ctx.clearRect(0, 0, $width, $height);\n\n      features.features.forEach(feature => {\n        $ctx.beginPath();\n        // Set the context here since setting it in `$: geoPath` is a circular reference\n        geoPathFn.context($ctx);\n        geoPathFn(feature);\n\n        $ctx.fillStyle = fill;\n        // $ctx.fillStyle = $zGet(feature.properties); // Use this if making a choropleth\n        $ctx.fill();\n\n        $ctx.lineWidth = strokeWidth;\n        $ctx.strokeStyle = stroke;\n        $ctx.stroke();\n      });\n    }\n  }\n</script>"},"dek":"","usedIn":[{"group":"Regular","matches":["/example/MapLayered"]},{"group":"SSR","matches":["/example-ssr/MapLayered"]}],"jsdocParsed":{"description":"Generates a canvas map using the `geoPath` function from [d3-geo](https://github.com/d3/d3-geo).","tags":[{"title":"type","description":"projection – A D3 projection function. Pass this in as an uncalled function, e.g. `projection={geoAlbersUsa}`.","type":{"type":"NameExpression","name":"Function"}},{"title":"type","description":"[features=$data.features] – A GeoJSON feature collection that has an array of features on its `features` key. Use this if you want to draw a subset of the features in `$data` while keeping the zoom on the whole GeoJSON feature set. By default, it plots everything in `$data`.","type":{"type":"NameExpression","name":"GeoJsonFeatureCollection"}},{"title":"type","description":"[stroke='#ccc'] – The shape's stroke color.","type":{"type":"NameExpression","name":"String"}},{"title":"type","description":"[strokeWidth=1] – The shape's stroke width.","type":{"type":"NameExpression","name":"Number"}},{"title":"type","description":"[fill='#fff'] – The shape's fill color.","type":{"type":"NameExpression","name":"String"}}]}}