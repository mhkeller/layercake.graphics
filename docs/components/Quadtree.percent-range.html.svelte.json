{"main":{"slug":"Quadtree.percent-range.html.svelte","contents":"<script>\n  /**\n    Creates an interaction layer (in HTML) using [d3-quadtree](https://github.com/d3/d3-quadtree) to find the nearest datapoint to the mouse. This component creates a slot that exposes variables `x`, `y`, `found` (the found datapoint), `visible` (a Boolean whether any data was found) and `e` (the event object). This component works with a percent range so the `x` and `y` values coming back will be percentages.\n\n    The quadtree searches across both the x and y dimensions at the same time. But if you want to only search across one, set the `x` and `y` props to the same value. For example, the [shared tooltip component](https://layercake.graphics/components/SharedTooltip.html.svelte) sets `y='x'` since it's nicer behavior to only pick up on the nearest x-value.\n    @type {String} [searchRadius=undefined] – The number of pixels to search around the mouse's location. This is the third argument passed to [`quadtree.find`](https://github.com/d3/d3-quadtree#quadtree_find) and by default a value of `undefined` means an unlimited range.\n    @type {String} [x='x'] – The dimension to search across when moving the mouse left and right.\n    @type {String} [y='y'] – The dimension to search across when moving the mouse up and down.\n    @type {Array} [dataset=$data] – The dataset to work off of. You can pass something custom in here in case you don't want to use the main data or it's in a strange format.\n  */\n  import { getContext } from 'svelte';\n  import { quadtree } from 'd3-quadtree';\n\n  const { data, xGet, yGet, width, height } = getContext('LayerCake');\n\n  let visible = false;\n  let found = {};\n  let e = {};\n\n  export let x = 'x';\n  export let y = 'y';\n  export let searchRadius = undefined;\n  export let dataset = $data;\n\n  $: xGetter = x === 'x' ? $xGet : $yGet;\n  $: yGetter = y === 'y' ? $yGet : $xGet;\n\n  function findItem (evt) {\n    e = evt;\n\n    const xLayerKey = `layer${x.toUpperCase()}`;\n    const yLayerKey = `layer${y.toUpperCase()}`;\n\n    const xLayerVal = (evt[xLayerKey] / (x === 'x' ? $width : $height)) * 100;\n    const yLayerVal = (evt[yLayerKey] / (y === 'y' ? $height : $width)) * 100;\n\n    found = finder.find(xLayerVal, yLayerVal, searchRadius) || {};\n\n    visible = Object.keys(found).length > 0;\n  }\n\n  $: finder = quadtree()\n    .extent([[-1, -1], [$width + 1, $height + 1]])\n    .x(xGetter)\n    .y(yGetter)\n    .addAll(dataset);\n</script>\n\n<style>\n  .bg {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n</style>\n\n<div\n  class=\"bg\"\n  on:mousemove=\"{findItem}\"\n  on:mouseout=\"{() => visible = false}\"\n  on:blur=\"{() => visible = false}\"\n></div>\n<slot\n  x={xGetter(found) || 0}\n  y={yGetter(found) || 0}\n  {found}\n  {visible}\n  {e}\n></slot>"},"dek":"","usedIn":[{"group":"Regular","matches":[]},{"group":"SSR","matches":[]}],"jsdocParsed":{"description":"Creates an interaction layer (in HTML) using [d3-quadtree](https://github.com/d3/d3-quadtree) to find the nearest datapoint to the mouse. This component creates a slot that exposes variables `x`, `y`, `found` (the found datapoint), `visible` (a Boolean whether any data was found) and `e` (the event object). This component works with a percent range so the `x` and `y` values coming back will be percentages.\n\nThe quadtree searches across both the x and y dimensions at the same time. But if you want to only search across one, set the `x` and `y` props to the same value. For example, the [shared tooltip component](https://layercake.graphics/components/SharedTooltip.html.svelte) sets `y='x'` since it's nicer behavior to only pick up on the nearest x-value.","tags":[{"title":"param","description":"– The number of pixels to search around the mouse's location. This is the third argument passed to [`quadtree.find`](https://github.com/d3/d3-quadtree#quadtree_find) and by default a value of `undefined` means an unlimited range.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"searchRadius","default":"undefined"},{"title":"param","description":"– The dimension to search across when moving the mouse left and right.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"x","default":"'x'"},{"title":"param","description":"– The dimension to search across when moving the mouse up and down.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"y","default":"'y'"},{"title":"param","description":"– The dataset to work off of. You can pass something custom in here in case you don't want to use the main data or it's in a strange format.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Array"}},"name":"dataset","default":"$data"}]}}
