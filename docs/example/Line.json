{"main":{"title":"index.svelte","contents":"<script>\n  import { LayerCake, Svg } from 'layercake';\n\n  import Line from './components/Line.svelte';\n  import Area from './components/Area.svelte';\n  import AxisX from './components/AxisX.svelte';\n  import AxisY from './components/AxisY.svelte';\n\n  // This example loads csv data as json using @rollup/plugin-dsv\n  import data from './data/points.csv';\n\n  const xKey = 'myX';\n  const yKey = 'myY';\n\n  data.forEach(d => {\n    d[yKey] = +d[yKey];\n  });\n</script>\n\n<style>\n  /*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the <LayerCake> element will\n    expand to fill it.\n  */\n  .chart-container {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<div class=\"chart-container\">\n  <LayerCake\n    padding={{ right: 10, bottom: 20, left: 25 }}\n    x={xKey}\n    y={yKey}\n    yDomain={[0, null]}\n    data={data}\n  >\n    <Svg>\n      <AxisX/>\n      <AxisY\n        ticks={4}\n      />\n      <Line/>\n      <Area/>\n    </Svg>\n  </LayerCake>\n</div>"},"dek":"A simple line and area chart.\n","components":[{"title":"./components/Line.svelte","contents":"<script>\n  /**\n    Generates an SVG area shape using the `area` function from [d3-shape](https://github.com/d3/d3-shape).\n    @type {String} [stroke='#ab00d6'] – The shape's fill color. This is technically optional because it comes with a default value but you'll likely want to replace it with your own color.\n  */\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet } = getContext('LayerCake');\n\n  export let stroke = '#ab00d6';\n\n  $: path = 'M' + $data\n    .map(d => {\n      return $xGet(d) + ',' + $yGet(d);\n    })\n    .join('L');\n</script>\n\n<path class='path-line' d='{path}' {stroke}></path>\n\n<style>\n  .path-line {\n    fill: none;\n    stroke-linejoin: round;\n    stroke-linecap: round;\n    stroke-width: 2;\n  }\n</style>"},{"title":"./components/Area.svelte","contents":"<script>\n  /**\n    Generates an SVG area shape manually constructing the SVG path.\n    @type {String} [fill='#ab00d610'] – The shape's fill color. This is technically optional because it comes with a default value but you'll likely want to replace it with your own color.\n  */\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet, xScale, yScale, extents } = getContext('LayerCake');\n\n  export let fill = '#ab00d610';\n\n  $: path = 'M' + $data\n    .map(d => {\n      return $xGet(d) + ',' + $yGet(d);\n    })\n    .join('L');\n\n  let area;\n\n  $: {\n    const yRange = $yScale.range();\n    area = path + (\n      'L' + $xScale($extents.x ? $extents.x[1] : 0) + ',' + yRange[0] +\n      'L' + $xScale($extents.x ? $extents.x[0] : 0) + ',' + yRange[0] +\n      'Z'\n    );\n  }\n</script>\n\n<path class='path-area' d='{area}' {fill}></path>"},{"title":"./components/AxisX.svelte","contents":"<script>\n  /**\n    Generates an SVG x-axis. This component is also configured to detect if your x-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.\n    @type {Boolean} [gridlines=true] – Extend lines from the ticks into the chart space\n    @type {Boolean} [tickMarks=false] – Show a vertical mark for each tick.\n    @type {Boolean} [baseline=false] – Show a solid line at the bottom.\n    @type {Boolean} [snapTicks=false] – Instead of centering the text on the first and the last items, align them to the edges of the chart.\n    @type {Function} [formatTick=d => d] – A function that passes the current tick value and expects a nicely formatted value in return.\n    @type {Number|Array|Function} [ticks] – If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. If nothing, it uses the default ticks supplied by the D3 function.\n    @type {Number} [xTick=0] – TK\n    @type {Number} [yTick=16] – The distance from the baseline to place each tick value.\n  */\n  import { getContext } from 'svelte';\n\n  const { width, height, xScale, yRange } = getContext('LayerCake');\n\n  export let gridlines = true;\n  export let tickMarks = false;\n  export let baseline = false;\n  export let snapTicks = false;\n  export let formatTick = d => d;\n  export let ticks = undefined;\n  export let xTick = 0;\n  export let yTick = 16;\n\n  $: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $xScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($xScale.ticks()) :\n          $xScale.ticks(ticks);\n\n  function textAnchor(i) {\n    if (snapTicks === true) {\n      if (i === 0) {\n        return 'start';\n      }\n      if (i === tickVals.length - 1) {\n        return 'end';\n      }\n    }\n    return 'middle';\n  }\n</script>\n\n<g class='axis x-axis' class:snapTicks>\n  {#each tickVals as tick, i}\n    <g class='tick tick-{ i }' transform='translate({$xScale(tick)},{$yRange[0]})'>\n      {#if gridlines !== false}\n        <line class=\"gridline\" y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n      {/if}\n      {#if tickMarks === true}\n        <line class=\"tick-mark\" y1='{0}' y2='{6}' x1='{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0}' x2='{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0}'></line>\n      {/if}\n      <text\n        x=\"{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0}\"\n        y='{yTick}'\n        dx=''\n        dy=''\n        text-anchor='{textAnchor(i)}'>{formatTick(tick)}</text>\n    </g>\n  {/each}\n  {#if baseline === true}\n    <line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n  {/if}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick .tick-mark,\n  .baseline {\n    stroke-dasharray: 0;\n  }\n  /* This looks slightly better */\n  .axis.snapTicks .tick:last-child text {\n    transform: translateX(3px);\n  }\n  .axis.snapTicks .tick.tick-0 text {\n    transform: translateX(-3px);\n  }\n</style>"},{"title":"./components/AxisY.svelte","contents":"<script>\n  /**\n    Generates an HTML y-axis.\n    @type {Boolean} [gridlines=true] – Extend lines from the ticks into the chart space\n    @type {Boolean} [tickMarks=false] – Show a vertical mark for each tick.\n    @type {Function} [formatTick=d => d] – A function that passes the current tick value and expects a nicely formatted value in return.\n    @type {Number|Array|Function} [ticks=4] – If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return.\n    @type {Number} [xTick=0] – How far over to position the text marker.\n    @type {Number} [dxTick=0] – Any optional value passed to the `dx` attribute on the text marker and tick mark (if visible). This is ignored on the text marker if your scale is ordinal.\n    @type {Number} [yTick=0] – How far up and down to position the text marker.\n    @type {Number} [dyTick=0] – Any optional value passed to the `dy` attribute on the text marker and tick mark (if visible). This is ignored on the text marker if your scale is ordinal.\n  */\n  import { getContext } from 'svelte';\n\n  const { padding, xRange, yScale } = getContext('LayerCake');\n\n  export let gridlines = true;\n  export let tickMarks = false;\n  export let formatTick = d => d;\n  export let ticks = 4;\n  export let xTick = 0;\n  export let yTick = 0;\n  export let dxTick = 0;\n  export let dyTick = -4;\n  export let textAnchor = 'start';\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $yScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($yScale.ticks()) :\n          $yScale.ticks(ticks);\n</script>\n\n<g class='axis y-axis' transform='translate({-$padding.left}, 0)'>\n  {#each tickVals as tick}\n    <g class='tick tick-{tick}' transform='translate({$xRange[0] + (isBandwidth ? $padding.left : 0)}, {$yScale(tick)})'>\n      {#if gridlines !== false}\n        <line\n          class=\"gridline\"\n          x2='100%'\n          y1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n          y2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n        ></line>\n      {/if}\n      {#if tickMarks === true}\n        <line\n          class='tick-mark'\n          x1='0'\n          x2='{isBandwidth ? -6 : 6}'\n          y1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n          y2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n        ></line>\n      {/if}\n      <text\n        x='{xTick}'\n        y='{yTick + (isBandwidth ? $yScale.bandwidth() / 2 : 0)}'\n        dx='{isBandwidth ? -9 : dxTick}'\n        dy='{isBandwidth ? 4 : dyTick}'\n        style=\"text-anchor:{isBandwidth ? 'end' : textAnchor};\"\n      >{formatTick(tick)}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n  }\n  .tick .gridline {\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[{"title":"./data/points.csv","contents":"myX,myY\n1979,7.19\n1980,7.83\n1981,7.24\n1982,7.44\n1983,7.51\n1984,7.1\n1985,6.91\n1986,7.53\n1987,7.47\n1988,7.48\n1989,7.03\n1990,6.23\n1991,6.54\n1992,7.54\n1993,6.5\n1994,7.18\n1995,6.12\n1996,7.87\n1997,6.73\n1998,6.55\n1999,6.23\n2000,6.31\n2001,6.74\n2002,5.95\n2003,6.13\n2004,6.04\n2005,5.56\n2006,5.91\n2007,4.29\n2008,4.72\n2009,5.38\n2010,4.92\n2011,4.61\n2012,3.62\n2013,5.35\n2014,5.28\n2015,4.63\n2016,4.72"}],"jsons":[]}
