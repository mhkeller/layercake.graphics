{"main":{"title":"index.svelte","contents":"<script>\n  import { LayerCake, Svg, calcExtents } from 'layercake';\n  import { timeDay } from 'd3-time';\n  import { scaleBand, scaleTime } from 'd3-scale';\n\n  import ScatterSvg from './components/Scatter.svg.svelte';\n  import AxisX from './components/AxisX.svelte';\n  import AxisY from './components/AxisY.svelte';\n\n  // This example loads csv data as json using @rollup/plugin-dsv\n  import data from './data/days.csv';\n\n  const xKey = 'seconds';\n  const yKey = 'day';\n\n  const r = 4;\n  const padding = 2;\n\n  const daysTransformed = data.map(d => {\n    const parts = d.timestring.split('T');\n    const time = parts[1].replace('Z', '').split(':').map(q => +q);\n    d[xKey] = time[0] * 60 * 60 + time[1] * 60 + time[2];\n    d[yKey] = parts[0];\n    return d;\n  });\n\n  /* --------------------------------------------\n   * Generate a range of days in between the min and max\n   * in case we are missing any in our data so we can show empty days for them\n   */\n  const extents = calcExtents(daysTransformed, {\n    x: d => d.timestring\n  });\n\n  const minDate = extents.x[0].split('T')[0].split('-').map(d => +d);\n  const maxDate = extents.x[1].split('T')[0].split('-').map(d => +d);\n\n  const allDays = timeDay.range(new Date(Date.UTC(minDate[0], minDate[1] - 1, minDate[2])), new Date(Date.UTC(maxDate[0], maxDate[1] - 1, maxDate[2] + 1)))\n    .map(d => d.toISOString().split('T')[0]).sort().reverse();\n\n</script>\n\n<style>\n  /*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the <LayerCake> element will\n    expand to fill it.\n  */\n  .chart-container {\n    width: 100%;\n    height: 100%;\n  }\n</style>\n\n<div class=\"chart-container\">\n  <LayerCake\n    padding={{ top: 0, right: 15, bottom: 20, left: 75 }}\n    x={xKey}\n    y={yKey}\n    xDomain={[0, 24 * 60 * 60]}\n    yDomain={allDays}\n    xScale={scaleTime()}\n    yScale={scaleBand().paddingInner([0.05]).round(true)}\n    xPadding={[padding, padding]}\n    data={daysTransformed}\n  >\n\n    <Svg>\n      <AxisX\n        ticks={[0, 4, 8, 12, 16, 20, 24].map(d => d * 60 * 60)}\n        formatTick={d => `${Math.floor(d / 60 / 60)}:00`}\n      />\n      <AxisY/>\n      <ScatterSvg\n        {r}\n        fill={'rgba(255, 204, 0, 0.75)'}\n        dy={scale => scale.bandwidth() / 2}\n      />\n    </Svg>\n\n  </LayerCake>\n</div>"},"dek":"A scatter plot with an `scaleBand` for the y-scale to bucket them by day and a `scaleTime` for the x-scale. The only real fancy part of this plot is modifying the input data to be in \"seconds since start of day\" and generating the `yDomain` as *every* day between the min and max values, not just days for which we have values. This lets us see days in between that have no data.\n","components":[{"title":"./components/Scatter.svg.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet, xScale, yScale } = getContext('LayerCake');\n\n  export let r = 5;\n  export let fill = '#000';\n  export let stroke = '#0cf';\n  export let strokeWidth = 0;\n  export let dx = 0;\n  export let dy = 0;\n</script>\n\n<g class=\"scatter-group\">\n  {#each $data as d}\n    <circle\n      cx={$xGet(d) + (typeof dx === 'function' ? dx($xScale) : dx)}\n      cy={$yGet(d) + (typeof dy === 'function' ? dy($yScale) : dy)}\n      {r}\n      {fill}\n      {stroke}\n      stroke-width={strokeWidth}\n    />\n  {/each}\n</g>"},{"title":"./components/AxisX.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { width, height, xScale, yRange } = getContext('LayerCake');\n\n  export let gridlines = true;\n  export let tickMarks = false;\n  export let formatTick = d => d;\n  export let baseline = false;\n  export let snapTicks = false;\n  export let ticks = undefined;\n  export let xTick = undefined;\n  export let yTick = 16;\n  export let dxTick = 0;\n  export let dyTick = 0;\n\n  $: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $xScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($xScale.ticks()) :\n          $xScale.ticks(ticks);\n\n  function textAnchor(i) {\n    if (snapTicks === true) {\n      if (i === 0) {\n        return 'start';\n      }\n      if (i === tickVals.length - 1) {\n        return 'end';\n      }\n    }\n    return 'middle';\n  }\n</script>\n\n<g class='axis x-axis' class:snapTicks>\n  {#each tickVals as tick, i}\n    <g class='tick tick-{ i }' transform='translate({$xScale(tick)},{$yRange[0]})'>\n      {#if gridlines !== false}\n        <line class=\"gridline\" y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n      {/if}\n      {#if tickMarks === true}\n        <line class=\"tick-mark\" y1='{0}' y2='{6}' x1='{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0}' x2='{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0}'></line>\n      {/if}\n      <text\n        x=\"{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0}\"\n        y='{yTick}'\n        dx='{dxTick}'\n        dy='{dyTick}'\n        text-anchor='{textAnchor(i)}'>{formatTick(tick)}</text>\n    </g>\n  {/each}\n  {#if baseline === true}\n    <line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n  {/if}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick .tick-mark,\n  .baseline {\n    stroke-dasharray: 0;\n  }\n  /* This looks slightly better */\n  .axis.snapTicks .tick:last-child text {\n    transform: translateX(3px);\n  }\n  .axis.snapTicks .tick.tick-0 text {\n    transform: translateX(-3px);\n  }\n</style>"},{"title":"./components/AxisY.svelte","contents":"<script>\n  import { getContext } from 'svelte';\n\n  const { padding, xRange, yScale } = getContext('LayerCake');\n\n  export let ticks = 4;\n  export let tickMarks = false;\n  export let gridlines = true;\n  export let formatTick = d => d;\n  export let xTick = 0;\n  export let yTick = 0;\n  export let dxTick = 0;\n  export let dyTick = -4;\n  export let textAnchor = 'start';\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $yScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($yScale.ticks()) :\n          $yScale.ticks(ticks);\n</script>\n\n<g class='axis y-axis' transform='translate({-$padding.left}, 0)'>\n  {#each tickVals as tick, i}\n    <g class='tick tick-{tick}' transform='translate({$xRange[0] + (isBandwidth ? $padding.left : 0)}, {$yScale(tick)})'>\n      {#if gridlines !== false}\n        <line\n          class=\"gridline\"\n          x2='100%'\n          y1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n          y2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n        ></line>\n      {/if}\n      {#if tickMarks === true}\n        <line\n          class='tick-mark'\n          x1='0'\n          x2='{isBandwidth ? -6 : 6}'\n          y1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n          y2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n        ></line>\n      {/if}\n      <text\n        x='{xTick}'\n        y='{yTick + (isBandwidth ? $yScale.bandwidth() / 2 : 0)}'\n        dx='{isBandwidth ? -9 : dxTick}'\n        dy='{isBandwidth ? 4 : dyTick}'\n        style=\"text-anchor:{isBandwidth ? 'end' : textAnchor};\"\n      >{formatTick(tick)}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n  }\n  .tick .gridline {\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>"}],"modules":[],"componentModules":[],"componentComponents":[],"csvs":[{"title":"./data/days.csv","contents":"timestring\n2018-07-22T22:25:55Z\n2018-07-22T19:35:29Z\n2018-07-22T18:54:42Z\n2018-07-22T02:05:59Z\n2018-07-22T00:55:02Z\n2018-07-22T00:53:00Z\n2018-07-22T23:32:37Z\n2018-07-22T17:52:55Z\n2018-07-22T17:52:01Z\n2018-07-22T17:32:21Z\n2018-07-22T16:38:22Z\n2018-07-22T16:38:20Z\n2018-07-22T21:07:28Z\n2018-07-22T01:36:47Z\n2018-07-22T01:00:04Z\n2018-07-22T20:15:35Z\n2018-07-23T03:05:05Z\n2018-07-23T02:56:18Z\n2018-07-23T02:11:53Z\n2018-07-23T02:08:49Z\n2018-07-23T02:02:14Z\n2018-07-23T04:13:29Z\n2018-07-23T03:24:58Z\n2018-07-23T03:23:55Z\n2018-07-23T03:22:02Z\n2018-07-23T18:37:05Z\n2018-07-23T01:34:48Z\n2018-07-23T01:11:38Z\n2018-07-23T01:02:25Z\n2018-07-23T23:32:07Z\n2018-07-23T18:26:04Z\n2018-07-24T18:25:35Z\n2018-07-24T02:56:28Z\n2018-07-24T16:33:57Z\n2018-07-24T15:52:16Z\n2018-07-24T20:31:12Z\n2018-07-24T20:27:11Z\n2018-07-24T14:17:18Z\n2018-07-24T03:49:28Z\n2018-07-24T03:42:33Z\n2018-07-24T03:20:45Z\n2018-07-24T01:47:25Z\n2018-07-24T01:26:16Z\n2018-07-24T01:16:55Z\n2018-07-25T00:50:15Z\n2018-07-25T19:16:21Z\n2018-07-25T02:38:15Z\n2018-07-25T01:03:55Z\n2018-07-25T01:00:55Z\n2018-07-25T00:59:31Z\n2018-07-25T19:06:36Z\n2018-07-25T19:03:18Z\n2018-07-25T01:05:50Z\n2018-07-25T23:43:32Z\n2018-07-25T17:39:53Z\n2018-07-25T17:37:15Z\n2018-07-25T15:50:12Z\n2018-07-25T03:47:16Z\n2018-07-25T03:06:21Z\n2018-07-25T02:59:34Z\n2018-07-25T20:53:53Z\n2018-07-25T01:37:58Z\n2018-07-25T01:32:23Z\n2018-07-25T01:30:09Z\n2018-07-25T17:03:39Z\n2018-07-25T16:00:39Z\n2018-07-25T15:59:44Z\n2018-07-25T22:29:55Z\n2018-07-25T02:59:41Z\n2018-07-25T02:58:36Z\n2018-07-25T02:56:41Z\n2018-07-25T02:21:56Z\n2018-07-25T02:20:27Z\n2018-07-25T02:15:25Z\n2018-07-25T02:22:38Z\n2018-07-25T02:19:25Z\n2018-07-25T22:48:50Z\n2018-07-25T06:52:20Z\n2018-07-25T06:45:09Z\n2018-07-25T21:18:11Z\n2018-07-25T17:35:37Z\n2018-07-25T01:52:56Z\n2018-07-25T01:07:36Z\n2018-07-25T01:05:37Z\n2018-07-25T01:05:27Z\n2018-07-25T17:24:44Z\n2018-07-25T15:53:26Z\n2018-07-25T15:32:59Z\n2018-07-25T17:33:38Z\n2018-07-25T15:28:30Z\n2018-07-25T15:16:40Z\n2018-07-28T15:07:48Z\n2018-07-28T13:56:38Z\n2018-07-28T04:46:00Z\n2018-07-28T04:19:46Z\n2018-07-28T04:18:59Z\n2018-07-28T04:14:41Z\n2018-07-28T03:54:01Z\n2018-07-28T03:53:10Z\n2018-07-28T02:28:02Z\n2018-07-28T17:41:43Z\n2018-07-28T04:42:10Z\n2018-07-28T04:40:23Z\n2018-07-28T04:40:10Z\n2018-07-28T01:31:38Z\n2018-07-28T00:23:02Z\n2018-07-28T18:17:10Z\n2018-07-28T18:08:21Z\n2018-07-28T15:29:46Z\n2018-07-28T15:15:33Z\n2018-07-28T04:54:39Z\n2018-07-28T04:27:48Z\n2018-07-28T04:24:37Z\n2018-07-28T04:08:45Z\n2018-07-28T03:53:50Z\n2018-07-28T03:42:23Z\n2018-07-28T19:03:27Z\n2018-07-28T00:32:39Z\n2018-07-28T00:32:32Z\n2018-07-28T02:57:20Z\n2018-07-28T02:54:40Z\n2018-07-28T04:28:23Z\n2018-07-28T02:19:41Z\n2018-07-28T00:50:51Z\n2018-07-28T00:40:52Z\n2018-07-28T21:54:06Z\n2018-07-28T21:53:09Z\n2018-07-28T19:09:30Z\n2018-07-28T18:55:04Z\n2018-07-28T18:51:44Z\n2018-07-28T17:24:28Z\n2018-07-28T02:31:18Z\n2018-07-28T04:20:20Z\n2018-07-28T04:19:13Z\n2018-07-28T04:16:31Z"}],"jsons":[]}