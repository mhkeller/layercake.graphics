[{"html":"<h3 id=\"what-is-layer-cake\">What is Layer Cake?<a href=\"/guide#what-is-layer-cake\"> </a></h3><p>Layer Cake is a graphics framework for <a href=\"https://svelte.dev\">Svelte</a> that removes the boilerplate from making responsive web graphics. it gives you common elements, like a coordinate system and scales, for you to start creating your own dataviz layers, like axes, plots and annotations.</p>\n<p>Layer Cake is described as a framework and not a library because unlike Vega or HighCharts, it doesn&#39;t automatically create, for example, a scatter chart for you. It gives you the scales and the DOM element to encode chart elements from your data. This is because every chart ends up being custom in one way or another. Other libraries handle this usually by creating a complex JSON specification but learning that is a big investment and often mentally taxing.</p>\n<p>The idea behind a Layer Cake chart is you can start from a basic scatter, line or bar chart template but because those chart layers live in your project, you can customize them however you want.</p>\n<p>By organizing a graphic into layers, you can more easily reuse components from project to project. It also lets you easily move between web languages (SVG, Canvas, HTML, WebGL) by giving you a common coordinate system they can all use. That way, you can choose the best format for each element without worrying superimposing different elements on top of one another.</p>\n<p>Layer Cake is more about having a system to organize your own custom components than it is a high-level charting library. It doesn&#39;t have any built-in concepts or strong opinions about how your data should be structured.</p>\n<blockquote>\n<p>Layer Cake uses D3 scales. See more in the <a href=\"/guide#xscale\">xScale</a>, <a href=\"/guide#yscale\">yScale</a>, <a href=\"/guide#zscale\">zScale</a> and <a href=\"/guide#rscale\">rScale</a> sections of the <a href=\"/guide#layercake-props\">Layer Cake Props API</a>.</p>\n</blockquote>\n<h3 id=\"getting-started\">Getting started<a href=\"/guide#getting-started\"> </a></h3><p>Install Layer Cake in your <code>devDependencies</code> alongside Svelte.</p>\n<div class='code-block'><pre><code>npm install --save-dev layercake</code></pre></div><p>The easiest way to get started is to clone down, or use <a href=\"https://github.com/rich-harris/degit\">degit</a> to grab the starter template at <a href=\"https://github.com/mhkeller/layercake-template\">https://github.com/mhkeller/layercake-template</a>.</p>\n<div class='code-block'><pre><code>degit mhkeller/layercake-template my-chart\n<span class=\"hljs-built_in\">cd</span> my-chart</code></pre></div><p>The <code>App.svelte</code> file in this example is your main Svelte component. You can render a LayerCake inside a DOM element like so.</p>\n<div class='code-block named'><span class='filename'> js/App.svelte</span><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> { LayerCake } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;layercake&#x27;</span>;\n\n  <span class=\"hljs-comment\">// Define some data</span>\n  <span class=\"hljs-keyword\">const</span> points = [\n    {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span>},\n    {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">10</span>},\n    {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">20</span>},\n    {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">15</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">30</span>},\n    {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">20</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">40</span>}\n  ];\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-comment\">/*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the &lt;LayerCake&gt; element will\n    expand to fill it.\n  */</span>\n  <span class=\"hljs-selector-class\">.chart-container</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">300px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;chart-container&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span>\n    <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">points</span> }\n    <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&#x27;x&#x27;</span>\n    <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&#x27;y&#x27;</span>\n  &gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- Components go here --&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre></div><blockquote>\n<p>Each of the <a href=\"https://layercake.graphics\">chart examples</a> can be downloaded or edited live in the browser by clicking on the &quot;Download&quot; or &quot;Edit&quot; buttons, respectively.</p>\n</blockquote>\n<h3 id=\"using-layout-components\">Using layout components<a href=\"/guide#using-layout-components\"> </a></h3><p>Within the <code>LayerCake</code> component, you&#39;ll want to add at least one layout component, kind of like a wrapper. It can be <code>Svg</code>, <code>Html</code>, <code>Canvas</code> or <code>WebGL</code>. Within any of these is where you&#39;ll put your own custom layer components. Here&#39;s an example with a few different layout elements working together.</p>\n<div class='code-block named'><span class='filename'> App.svelte</span><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> { LayerCake, Svg, Canvas, Html }  <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;layercake&#x27;</span>;\n\n  <span class=\"hljs-comment\">// These are components that live in your project that</span>\n  <span class=\"hljs-comment\">// you can customize as you see fit</span>\n  <span class=\"hljs-keyword\">import</span> ScatterCanvas <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/ScatterCanvas.svelte&#x27;</span>;\n  <span class=\"hljs-keyword\">import</span> AxisX <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/AxisX.svelte&#x27;</span>;\n  <span class=\"hljs-keyword\">import</span> AxisY <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/AxisY.svelte&#x27;</span>;\n  <span class=\"hljs-keyword\">import</span> Annotations <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/Annotations.svelte&#x27;</span>;\n\n  <span class=\"hljs-comment\">// Set up some data</span>\n  <span class=\"hljs-keyword\">const</span> points = [\n    {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span>},\n    {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">10</span>},\n    {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">20</span>},\n    {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">15</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">30</span>},\n    {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">20</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">40</span>}\n  ];\n\n  <span class=\"hljs-keyword\">const</span> annotationBlurbs = [\n    { <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">20</span>, <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&#x27;Look at this value!&#x27;</span>}\n  ];\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-comment\">/*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the &lt;LayerCake&gt; element will\n    expand to fill it.\n  */</span>\n  <span class=\"hljs-selector-class\">.chart-container</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">300px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;chart-container&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span>\n    <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&#x27;x&#x27;</span>\n    <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&#x27;y&#x27;</span>\n    <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{points}</span>\n  &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Canvas</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ScatterCanvas</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">{</span>&#x27;<span class=\"hljs-attr\">blue</span>&#x27;} <span class=\"hljs-attr\">r</span>=<span class=\"hljs-string\">{3}/</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Canvas</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Svg</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AxisX</span>/&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AxisY</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Svg</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Html</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Annotations</span> <span class=\"hljs-attr\">blurbs</span>=<span class=\"hljs-string\">{annotationBlurbs}</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Html</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- If you wanted to, you could add another &lt;Svg&gt; again... --&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre></div><blockquote>\n<p>Layout components have a few their own properties that let you customize behavior. Read more in the <a href=\"guide#layout-components\">Layout Components</a> section.</p>\n</blockquote>\n<h3 id=\"layer-components\">Layer components<a href=\"/guide#layer-components\"> </a></h3><p>The only components the Layer Cake module exports are <code>LayerCake</code> and those layout components, everything else that actually draws your chart is up to you to create. Inside those layer components you can access the scales and other values derived from your data. You do this with Svelte&#39;s <a href=\"https://svelte.dev/docs#getContext\"><code>getContext</code></a> function.</p>\n<p>Here&#39;s an example starting with a similar <code>App.svelte</code> file to the example above. We&#39;re creating a scatter chart in SVG.</p>\n<div class='code-block named'><span class='filename'> App.svelte</span><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> { LayerCake, Svg } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;layercake&#x27;</span>;\n  <span class=\"hljs-keyword\">import</span> Scatter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/Scatter.svelte&#x27;</span>;\n\n  <span class=\"hljs-keyword\">const</span> points = [\n    {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span>},\n    {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">10</span>},\n    {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">20</span>},\n    {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">15</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">30</span>},\n    {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">20</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">40</span>}\n  ];\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-comment\">/*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the &lt;LayerCake&gt; element will\n    expand to fill it.\n  */</span>\n  <span class=\"hljs-selector-class\">.chart-container</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">300px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;chart-container&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span>\n    <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&#x27;x&#x27;</span>\n    <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&#x27;y&#x27;</span>\n    <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">points</span> }\n  &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Svg</span>&gt;</span>\n      <span class=\"hljs-comment\">&lt;!-- You can expose properties on your chart components to make them more reusable --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Scatter</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">{</span>&#x27;<span class=\"hljs-attr\">blue</span>&#x27;} <span class=\"hljs-attr\">r</span>=<span class=\"hljs-string\">{3}</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Svg</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre></div><p>This is what the scatter component looks like:</p>\n<div class='code-block named'><span class='filename'> ./components/Scatter.svelte</span><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-comment\">// Import the getContext function from svelte</span>\n  <span class=\"hljs-keyword\">import</span> { getContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;svelte&#x27;</span>;\n\n  <span class=\"hljs-comment\">// Access the context using the &#x27;LayerCake&#x27; keyword</span>\n  <span class=\"hljs-comment\">// Grab some helpful functions</span>\n  <span class=\"hljs-keyword\">const</span> { data, x, xScale, y, yScale } = getContext(<span class=\"hljs-string\">&#x27;LayerCake&#x27;</span>);\n\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> fill = <span class=\"hljs-string\">&#x27;#000&#x27;</span>;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> r = <span class=\"hljs-number\">5</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span>&gt;</span>\n  {#each $data as d}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">circle</span> <span class=\"hljs-attr\">cx</span>=<span class=\"hljs-string\">&#x27;{ $xScale($x(d)) }&#x27;</span> <span class=\"hljs-attr\">cy</span>=<span class=\"hljs-string\">&#x27;{ $yScale($y(d)) }&#x27;</span> {<span class=\"hljs-attr\">fill</span>} {<span class=\"hljs-attr\">r</span>} /&gt;</span>\n  {/each}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span></code></pre></div><blockquote>\n<p>You <em>could</em> hardcode the radius and fill in the component but exposing those variables to your App makes this component more reusable from project to project. Or, within a project, you could use the same layer component to render different charts of varying color.</p>\n</blockquote>\n<p>A few notes on this component:</p>\n<ol>\n<li>Everything that you export from <code>getContext(&#39;LayerCake&#39;)</code> is a <a href=\"https://svelte.dev/docs#svelte_store\">Svelte store</a> so prefix them with <code>$</code> in the template.</li>\n<li>This example is a bit verbose because we&#39;re calling our accessor functions and then our scale functions. You can combine these two steps with the built-in <code>xGet</code> and <code>yGet</code> functions. Like so:</li>\n</ol>\n<div class='code-block named'><span class='filename'> ./components/Scatter.svelte</span><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-comment\">// Import the getContext function from svelte</span>\n  <span class=\"hljs-keyword\">import</span> { getContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;svelte&#x27;</span>;\n\n  <span class=\"hljs-comment\">// Access the context using the &#x27;LayerCake&#x27; keyword</span>\n  <span class=\"hljs-comment\">// Grab some helpful functions</span>\n  <span class=\"hljs-keyword\">const</span> { data, xGet, yGet } = getContext(<span class=\"hljs-string\">&#x27;LayerCake&#x27;</span>);\n\n  <span class=\"hljs-comment\">// Customizable defaults</span>\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> fill = <span class=\"hljs-string\">&#x27;#000&#x27;</span>;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> r = <span class=\"hljs-number\">5</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">g</span>&gt;</span>\n  {#each $data as d}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">circle</span> <span class=\"hljs-attr\">cx</span>=<span class=\"hljs-string\">&#x27;{ $xGet(d) }&#x27;</span> <span class=\"hljs-attr\">cy</span>=<span class=\"hljs-string\">&#x27;{ $yGet(d) }&#x27;</span> {<span class=\"hljs-attr\">fill</span>} {<span class=\"hljs-attr\">r</span>} /&gt;</span>\n  {/each}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">g</span>&gt;</span></code></pre></div><blockquote>\n<p>Many common chart types have example pages. See the gallery at <a href=\"https://layercake.graphics\">https://layercake.graphics</a> or use the dropdown menu at the top of the page to navigate to one.</p>\n</blockquote>\n<h3 id=\"data-less-cakes\">Data-less cakes<a href=\"/guide#data-less-cakes\"> </a></h3><p>You can also use Layer Cake to simply arrange SVG, HTML, Canvas and WebGL elements on top of one another, sharing the same dimensions. For example, this would be handy if you have some SVG artwork that you want to put on top of an HTML video player.</p>\n<p>Here&#39;s an example that doesn&#39;t set any properties on the <code>LayerCake</code> component:</p>\n<div class='code-block named'><span class='filename'> App.Svelte</span><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> { LayerCake, Svg, Html } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;layercake&#x27;</span>;\n  <span class=\"hljs-keyword\">import</span> Frame <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/Frame.svelte&#x27;</span>;\n  <span class=\"hljs-keyword\">import</span> VideoPlayer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/VideoPlayer.svelte&#x27;</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-comment\">/*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the &lt;LayerCake&gt; element will\n    expand to fill it.\n  */</span>\n  <span class=\"hljs-selector-class\">.chart-container</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">300px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;chart-container&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Svg</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Frame</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Svg</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Html</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">VideoPlayer</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Html</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre></div><h3 id=\"server-side-rendering\">Server-side rendering<a href=\"/guide#server-side-rendering\"> </a></h3><p>See the <a href=\"https://github.com/mhkeller/layercake-template\">layercake-template</a> for the rollup config needed to compile LayerCake server-side. In short, it creates a JavaScript file, which then constructs the required HTML and CSS when executed. You have the option of also hydrating that markup with any additiona client-side JavaScript, or building it without any bundled JavaScript.</p>\n<p>You can also use LayerCake in Sapper (or similar dev environment) to create charts that work without JavaScript, which is how the server-side examples on this site work. Just set the <a href=\"/guide#ssr\">ssr</a> prop to <code>true</code>. Check out the examples on the <a href=\"/\">home page</a> for useful patterns using the <a href=\"/guide#percentrange\">percentRange</a> option, the <a href=\"/guide#scaledsvg\">ScaledSvg</a> component and other percentage-based components.</p>\n","metadata":{"title":"Introduction"},"subsections":[{"slug":"what-is-layer-cake","title":"What is Layer Cake?"},{"slug":"getting-started","title":"Getting started"},{"slug":"using-layout-components","title":"Using layout components"},{"slug":"layer-components","title":"Layer components"},{"slug":"data-less-cakes","title":"Data-less cakes"},{"slug":"server-side-rendering","title":"Server-side rendering"}],"slug":"introduction","file":"00-introduction.md"},{"html":"<h3 id=\"the-chart-is-blank\">The chart is blank<a href=\"/guide#the-chart-is-blank\"> </a></h3><p>The <code>&lt;LayerCake&gt;</code> component expands to fill the size of its parent <code>&lt;div&gt;</code> – that&#39;s why all of the examples define a <code>chart-container</code> element with a specific width and height. If your chart isn&#39;t showing up, make sure you have a width and height set on your wrapper div. </p>\n<p>Inspect the DOM tree with your browser&#39;s dev tools and look at what width and height the Layer Cake layout elements are receiving and trace up the parents in the tree to see which element may not be sized properly. If you have an unusual combination of <code>absolute</code>-ly positioned elements, it could be one of the parents is not getting a specific width and height. </p>\n<p>Also take a look in the console for any warnings – LayerCake should warn you if any of the dimensions are zero or negative.</p>\n<h3 id=\"the-chart-is-a-very-small-square\">The chart is a very small square<a href=\"/guide#the-chart-is-a-very-small-square\"> </a></h3><p>This is likely due to some other JavaScript error on the page. A small rectangle of a chart, probably 100x100 means that the server-side rendering was able to bake elements onto the page, but something short-circuited the JavaScript. Check for other console errors that halted the JavaScript process.</p>\n<h3 id=\"the-library-isn39t-building-properly\">The library isn&#39;t building properly<a href=\"/guide#the-library-isn39t-building-properly\"> </a></h3><p>Layer Cake is <em>almost entirely</em> a basic Svelte component. The exception is the <a href=\"https://github.com/mhkeller/layercake/blob/bc13c6c38d54abc16d20ef37878fa707bf48a3bf/src/index.js\">index.js</a> file, which is an esm module. This file, though, is non-essential to how the library works and is just a pointer for the rest of the library&#39;s imports. If you copy Layer Cake&#39;s source into your project directly and import the individual components, it should build just like any other Svelte component in your project.</p>\n<p>For example:</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> LayerCake <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./layercake/src/LayerCake.svelte&#x27;</span>;\n  <span class=\"hljs-keyword\">import</span> Svg <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./layercake/src/layouts/Svg.svelte&#x27;</span>;\n  <span class=\"hljs-comment\">// etc...</span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre></div><blockquote>\n<p>Copying Layer Cake&#39;s layout components into your library is actually a great way to add any additional customizations or functionality while maintaining compatibility with the rest of the library&#39;s API. You can use any of the built-in layout components as a starting point for something more complex, if need be.</p>\n</blockquote>\n","metadata":{"title":"Troubleshooting"},"subsections":[{"slug":"the-chart-is-blank","title":"The chart is blank"},{"slug":"the-chart-is-a-very-small-square","title":"The chart is a very small square"},{"slug":"the-library-isn39t-building-properly","title":"The library isn't building properly"}],"slug":"troubleshooting","file":"01-troubleshooting.md"},{"html":"<p>These are the props you can set on the <code>LayerCake</code> component itself. You set them all like so:</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layercake</span>\n  <span class=\"hljs-attr\">foo</span>=<span class=\"hljs-string\">&#x27;foo&#x27;</span>\n  <span class=\"hljs-attr\">bar</span>=<span class=\"hljs-string\">&#x27;bar&#x27;</span>\n&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span></code></pre></div><p>The component also exports an <code>element</code> prop that represents the main wrapper, in case you need to access it for some reason. It also exposes this as a slot prop.</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">let</span> mainElement;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span>\n  <span class=\"hljs-attr\">bind:element</span>=<span class=\"hljs-string\">{mainElement}</span>\n  <span class=\"hljs-attr\">let:element</span>\n&gt;</span>\n  {console.log(mainElement === element)}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span></code></pre></div><h3 id=\"data\">data <code>Array</code><a href=\"/guide#data\"> </a></h3><p>A list of data items. If this is not a flat data array of objects, you&#39;ll also need to set <a href=\"/guide#flatdata\">flatData</a>.</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span>\n  <span class=\"hljs-attr\">data</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">myData</span> }\n&gt;</span></code></pre></div><h3 id=\"x\">x <code>String|Function|Array</code><a href=\"/guide#x\"> </a></h3><p>The key in each row of data that corresponds to the x-field. This can be a string or an accessor function. This property gets converted to a function when you access it through the context.</p>\n<div class='code-block'><pre><code>&lt;LayerCake\n  x=&#x27;myX&#x27;\n  &lt;!-- is equivalent to... --&gt;\n  x={ d =&gt; d.myX }\n&gt;</code></pre></div><p>You can also give this value an array of strings or arrays of functions. While it may seem counter-intuitive to have more than one x- or y-accessor, this is the case in stacked layouts and Cleveland dot plots. See the <a href=\"/example/BarStacked\">Stacked bar</a>, <a href=\"/example/AreaStacked\">Stacked area</a>, <a href=\"/example/ColumnStacked\">Stacked colummn</a> or <a href=\"/example/ClevelandDotPlot\">Cleveland dot plot</a> for complete examples.</p>\n<p>Here&#39;s an overview using the <code>d3.stack()</code> to make a horizontal bar chart, which will have two values for the x-accessor.</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">const</span> data = [\n  {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-attr\">apples</span>: <span class=\"hljs-number\">3840</span>, <span class=\"hljs-attr\">bananas</span>: <span class=\"hljs-number\">1920</span>, <span class=\"hljs-attr\">cherries</span>: <span class=\"hljs-number\">960</span>, <span class=\"hljs-attr\">dates</span>: <span class=\"hljs-number\">400</span>},\n  {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-attr\">apples</span>: <span class=\"hljs-number\">1600</span>, <span class=\"hljs-attr\">bananas</span>: <span class=\"hljs-number\">1440</span>, <span class=\"hljs-attr\">cherries</span>: <span class=\"hljs-number\">960</span>, <span class=\"hljs-attr\">dates</span>: <span class=\"hljs-number\">400</span>},\n  {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-attr\">apples</span>: <span class=\"hljs-number\">640</span>,  <span class=\"hljs-attr\">bananas</span>: <span class=\"hljs-number\">960</span>,  <span class=\"hljs-attr\">cherries</span>: <span class=\"hljs-number\">640</span>, <span class=\"hljs-attr\">dates</span>: <span class=\"hljs-number\">400</span>},\n  {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-attr\">apples</span>: <span class=\"hljs-number\">320</span>,  <span class=\"hljs-attr\">bananas</span>: <span class=\"hljs-number\">480</span>,  <span class=\"hljs-attr\">cherries</span>: <span class=\"hljs-number\">640</span>, <span class=\"hljs-attr\">dates</span>: <span class=\"hljs-number\">400</span>}\n];\n\n<span class=\"hljs-keyword\">const</span> stack = d3.stack()\n  .keys([<span class=\"hljs-string\">&#x27;apples&#x27;</span>, <span class=\"hljs-string\">&#x27;bananas&#x27;</span>, <span class=\"hljs-string\">&#x27;cherries&#x27;</span>, <span class=\"hljs-string\">&#x27;dates&#x27;</span>]);\n\n<span class=\"hljs-keyword\">const</span> series = stack(data);</code></pre></div><p>The data is now an array of values. The <code>month</code> values you can&#39;t see because sneakily stashes them as a property on the array, accessible as <code>d.data</code>.</p>\n<div class='code-block'><pre><code>[\n  [[   <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3840</span>], [   <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1600</span>], [   <span class=\"hljs-number\">0</span>,  <span class=\"hljs-number\">640</span>], [   <span class=\"hljs-number\">0</span>,  <span class=\"hljs-number\">320</span>]], <span class=\"hljs-comment\">// apples</span>\n  [[<span class=\"hljs-number\">3840</span>, <span class=\"hljs-number\">5760</span>], [<span class=\"hljs-number\">1600</span>, <span class=\"hljs-number\">3040</span>], [ <span class=\"hljs-number\">640</span>, <span class=\"hljs-number\">1600</span>], [ <span class=\"hljs-number\">320</span>,  <span class=\"hljs-number\">800</span>]], <span class=\"hljs-comment\">// bananas</span>\n  [[<span class=\"hljs-number\">5760</span>, <span class=\"hljs-number\">6720</span>], [<span class=\"hljs-number\">3040</span>, <span class=\"hljs-number\">4000</span>], [<span class=\"hljs-number\">1600</span>, <span class=\"hljs-number\">2240</span>], [ <span class=\"hljs-number\">800</span>, <span class=\"hljs-number\">1440</span>]], <span class=\"hljs-comment\">// cherries</span>\n  [[<span class=\"hljs-number\">6720</span>, <span class=\"hljs-number\">7120</span>], [<span class=\"hljs-number\">4000</span>, <span class=\"hljs-number\">4400</span>], [<span class=\"hljs-number\">2240</span>, <span class=\"hljs-number\">2640</span>], [<span class=\"hljs-number\">1440</span>, <span class=\"hljs-number\">1840</span>]]  <span class=\"hljs-comment\">// dates</span>\n]</code></pre></div><p>The x- and y-accessors would then look like this:</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span>\n  <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">{</span> [<span class=\"hljs-attr\">0</span>, <span class=\"hljs-attr\">1</span>] }\n  <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">{</span> <span class=\"hljs-attr\">d</span> =&gt;</span> d.data.month }\n&gt;</code></pre></div><p>Calls to <code>x(dataRow)</code> in this scenario will return the two-value array. Calls to <code>xGet(dataRow)</code> will return a two-value array, mapped through the <a href=\"/guide#xscale\">xScale</a>.</p>\n<h3 id=\"y\">y <code>String|Function|Array</code><a href=\"/guide#y\"> </a></h3><p>Same as <a href=\"/guide#x\">x</a> but for the y dimension.</p>\n<h3 id=\"z\">z <code>String|Function|Array</code><a href=\"/guide#z\"> </a></h3><p>Same as <a href=\"/guide#x\">x</a> but for the z dimension.</p>\n<h3 id=\"r\">r <code>String|Function|Array</code><a href=\"/guide#r\"> </a></h3><p>Same as <a href=\"/guide#x\">x</a> but for the r dimension.</p>\n<h3 id=\"padding\">padding <code>Object</code><a href=\"/guide#padding\"> </a></h3><p>An object that can specify <code>top</code>, <code>right</code>, <code>bottom</code>, or <code>left</code> padding in pixels. Any unspecified values are filled in as <code>0</code>. Padding operates like CSS <code>box-sizing: border-box;</code> where values are subtracted from the parent container&#39;s width and height, the same as <a href=\"https://bl.ocks.org/mbostock/3019563\">a D3 margin convention</a>.</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span>\n  <span class=\"hljs-attr\">padding</span>=<span class=\"hljs-string\">{</span> { <span class=\"hljs-attr\">top:</span> <span class=\"hljs-attr\">20</span>, <span class=\"hljs-attr\">right:</span> <span class=\"hljs-attr\">10</span>, <span class=\"hljs-attr\">bottom:</span> <span class=\"hljs-attr\">0</span>, <span class=\"hljs-attr\">left:</span> <span class=\"hljs-attr\">0</span> } }\n  // <span class=\"hljs-attr\">equivalent</span> <span class=\"hljs-attr\">to...</span>\n  <span class=\"hljs-attr\">padding</span>=<span class=\"hljs-string\">{</span> { <span class=\"hljs-attr\">top:</span> <span class=\"hljs-attr\">20</span>, <span class=\"hljs-attr\">right:</span> <span class=\"hljs-attr\">10</span> } }\n&gt;</span></code></pre></div><blockquote>\n<p>Another way to set padding is to add it via normal CSS on your target div. The target element is assigned CSS of <code>box-sizing: border-box;</code> so padding settings won&#39;t affect the width or height. If you set any padding via CSS, the padding object will be ignored.</p>\n</blockquote>\n<h3 id=\"xscale\">xScale <code><span class=\"function\">d3.</span>scaleLinear<span class=\"call\">(<span class=\"arguments\"></span>)</span></code><a href=\"/guide#xscale\"> </a></h3><p>The D3 scale that should be used for the x-dimension. Pass in an instantiated D3 scale if you want to override the default <code>d3.scaleLinear()</code> or you want to add extra options.</p>\n<p>See the <a href=\"/example/Column\">Column chart</a> for an example of passing in a <code>d3.scaleBand()</code> to override the default.</p>\n<h3 id=\"yscale\">yScale <code><span class=\"function\">d3.</span>scaleLinear<span class=\"call\">(<span class=\"arguments\"></span>)</span></code><a href=\"/guide#yscale\"> </a></h3><p>Same as <a href=\"/guide#xscale\">xScale</a> but for the y scale. The default is <code>d3.scaleLinear()</code>.</p>\n<h3 id=\"zscale\">zScale <code><span class=\"function\">d3.</span>scaleLinear<span class=\"call\">(<span class=\"arguments\"></span>)</span></code><a href=\"/guide#zscale\"> </a></h3><p>Same as <a href=\"/guide#xscale\">xScale</a> but for the z scale. The default is <code>d3.scaleLinear()</code>.</p>\n<h3 id=\"rscale\">rScale <code><span class=\"function\">d3.</span>scaleSqrt<span class=\"call\">(<span class=\"arguments\"></span>)</span></code><a href=\"/guide#rscale\"> </a></h3><p>Same as <a href=\"/guide#xscale\">xScale</a> but for the r scale. The default is <code>d3.scaleSqrt()</code>.</p>\n<h3 id=\"xdomain\">xDomain <code>Array:[min: Number, max: Number]</code><a href=\"/guide#xdomain\"> </a></h3><p>Set a min or max on the x scale. If you want to inherit the value from the data&#39;s extent, set that value to <code>null</code>.</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span>\n  <span class=\"hljs-attr\">xDomain</span>=<span class=\"hljs-string\">{</span> [<span class=\"hljs-attr\">0</span>, <span class=\"hljs-attr\">100</span>] } // <span class=\"hljs-attr\">Fixes</span> <span class=\"hljs-attr\">the</span> <span class=\"hljs-attr\">x</span> <span class=\"hljs-attr\">scale</span>&#x27;<span class=\"hljs-attr\">s</span> <span class=\"hljs-attr\">domain</span>\n  // <span class=\"hljs-attr\">or..</span>\n  <span class=\"hljs-attr\">xDomain</span>=<span class=\"hljs-string\">{</span> [<span class=\"hljs-attr\">0</span>, <span class=\"hljs-attr\">null</span>] } // <span class=\"hljs-attr\">Fixes</span> <span class=\"hljs-attr\">the</span> <span class=\"hljs-attr\">min</span> <span class=\"hljs-attr\">but</span> <span class=\"hljs-attr\">allows</span> <span class=\"hljs-attr\">the</span> <span class=\"hljs-attr\">max</span> <span class=\"hljs-attr\">to</span> <span class=\"hljs-attr\">be</span> <span class=\"hljs-attr\">whatever</span> <span class=\"hljs-attr\">is</span> <span class=\"hljs-attr\">in</span> <span class=\"hljs-attr\">the</span> <span class=\"hljs-attr\">data</span>\n&gt;</span></code></pre></div><h3 id=\"ydomain\">yDomain <code>Array:[min: Number, max: Number]</code><a href=\"/guide#ydomain\"> </a></h3><p>Same as <a href=\"/guide#xdomain\">xDomain</a> but for the y scale.</p>\n<h3 id=\"zdomain\">zDomain <code>Array:[min: Number, max: Number]</code><a href=\"/guide#zdomain\"> </a></h3><p>Same as <a href=\"/guide#xdomain\">xDomain</a> but for the z scale.</p>\n<h3 id=\"rdomain\">rDomain <code>Array:[min: Number, max: Number]</code><a href=\"/guide#rdomain\"> </a></h3><p>Same as <a href=\"/guide#xdomain\">xDomain</a> but for the r scale.</p>\n<h3 id=\"xreverse\">xReverse <code>Boolean=false</code><a href=\"/guide#xreverse\"> </a></h3><p>Reverse the default x domain. By default this is <code>false</code> and the domain is <code>[0, width]</code>.</p>\n<p>This is ignored if you set <a href=\"/guide#xRange\">xRange</a>.</p>\n<h3 id=\"yreverse\">yReverse <code>Boolean=true</code><a href=\"/guide#yreverse\"> </a></h3><p>Reverse the default y domain. By default this is <code>true</code> and the domain is <code>[height, 0]</code>.\nReverse the default x domain. By default this is <code>false</code> and the domain is <code>[0, width]</code>.</p>\n<p>This is ignored if you set <a href=\"/guide#yRange\">yRange</a>.</p>\n<h3 id=\"zreverse\">zReverse <code>Boolean=false</code><a href=\"/guide#zreverse\"> </a></h3><p>Reverse the default z domain. By default this is <code>false</code> and the domain is <code>[0, width]</code>.</p>\n<p>This is ignored if you set <a href=\"/guide#zRange\">zRange</a>.</p>\n<h3 id=\"rreverse\">rReverse <code>Boolean=false</code><a href=\"/guide#rreverse\"> </a></h3><p>Reverse the default r domain. By default this is <code>false</code> and the domain is <code>[1, 25]</code>.</p>\n<p>This is ignored if you set <a href=\"/guide#rRange\">rRange</a>.</p>\n<h3 id=\"xrange\">xRange <code>Function|Array:[min: Number, max: Number]</code><a href=\"/guide#xrange\"> </a></h3><p>Override the default y range of <code>[0, width]</code> by setting it here to an array or function with argument <code>({ width, height})</code> that returns an array.</p>\n<p>This overrides setting <a href=\"/guide#xreverse\">xReverse</a> to <code>true</code>.</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span>\n  <span class=\"hljs-attr\">xRange</span>=<span class=\"hljs-string\">{</span> [<span class=\"hljs-attr\">1</span>, <span class=\"hljs-attr\">100</span>] }\n&gt;</span></code></pre></div><p>It can also be a function:</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span>\n  <span class=\"hljs-attr\">xRange</span>=<span class=\"hljs-string\">{</span> ({ <span class=\"hljs-attr\">width</span>, <span class=\"hljs-attr\">height</span> }) =&gt;</span> [0, width / 2] }\n&gt;</code></pre></div><h3 id=\"yrange\">yRange <code>Function|Array:[min: Number, max: Number]</code><a href=\"/guide#yrange\"> </a></h3><p>Same as <a href=\"/guide#xrange\">xRange</a> but for the y scale. Override the default y range of <code>[0, height]</code> by setting it here to an array or function with argument <code>({ width, height})</code> that returns an array.</p>\n<p>This overrides setting <a href=\"/guide#yreverse\">yReverse</a> to <code>true</code>.</p>\n<h3 id=\"zrange\">zRange <code>Function|Array:[min: Number, max: Number]</code><a href=\"/guide#zrange\"> </a></h3><p>Same as <a href=\"/guide#xrange\">xRange</a> but for the z scale. Override the default z range of <code>[0, width]</code> by setting it here to an array or function with argument <code>({ width, height})</code> that returns an array.</p>\n<p>This overrides setting <a href=\"/guide#zreverse\">zReverse</a> to <code>true</code>.</p>\n<h3 id=\"rrange\">rRange <code>Function|Array:[min: Number, max: Number]</code><a href=\"/guide#rrange\"> </a></h3><p>Same as <a href=\"/guide#xrange\">xRange</a> but for the r scale. Override the default y range of <code>[1, 25]</code> by setting it here to an array or function with argument <code>({ width, height})</code> that returns an array. The r scale defaults to <code>d3.scaleSqrt</code> so make sure you don&#39;t use a zero in your range.</p>\n<p>This overrides setting <a href=\"/guide#rreverse\">rReverse</a> to <code>true</code>.</p>\n<h3 id=\"xpadding\">xPadding <code>Array:[leftPixels: Number, rightPixels: Number]</code><a href=\"/guide#xpadding\"> </a></h3><p>Assign a pixel value to add to the min or max of the x scale. This will increase the scales domain by the scale unit equivalent of the provided pixels. This is useful for adding extra space to a scatter plot so that your circles don&#39;t interfere with your y-axis. It&#39;s better than fussing with the range since you don&#39;t need to add a magic number to other components, like axes.</p>\n<p>It will log out a warning if you try to use it on a scale that has a domain or range that isn&#39;t two items, such as with ordinal scales.</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span>\n  <span class=\"hljs-attr\">xPadding</span>= <span class=\"hljs-string\">{</span> [<span class=\"hljs-attr\">10</span>, <span class=\"hljs-attr\">10</span>] } // <span class=\"hljs-attr\">Add</span> <span class=\"hljs-attr\">ten</span> <span class=\"hljs-attr\">pixels</span> <span class=\"hljs-attr\">of</span> <span class=\"hljs-attr\">data</span> <span class=\"hljs-attr\">units</span> <span class=\"hljs-attr\">to</span> <span class=\"hljs-attr\">both</span> <span class=\"hljs-attr\">sides</span> <span class=\"hljs-attr\">of</span> <span class=\"hljs-attr\">the</span> <span class=\"hljs-attr\">scale</span>&#x27;<span class=\"hljs-attr\">s</span> <span class=\"hljs-attr\">domain</span>\n&gt;</span></code></pre></div><h3 id=\"ypadding\">yPadding <code>Array:[leftPixels: Number, rightPixels: Number]</code><a href=\"/guide#ypadding\"> </a></h3><p>Same as <a href=\"/guide#xpadding\">xPadding</a> but for the y domain.</p>\n<h3 id=\"zpadding\">zPadding <code>Array:[leftPixels: Number, rightPixels: Number]</code><a href=\"/guide#zpadding\"> </a></h3><p>Same as <a href=\"/guide#xpadding\">xPadding</a> but for the z domain.</p>\n<h3 id=\"rpadding\">rPadding <code>Array:[leftPixels: Number, rightPixels: Number]</code><a href=\"/guide#rpadding\"> </a></h3><p>Same as <a href=\"/guide#xpadding\">xPadding</a> but for the r domain.</p>\n<h3 id=\"xnice\">xNice <code>Boolean=false</code><a href=\"/guide#xnice\"> </a></h3><p>Applies D3&#39;s <a href=\"https://github.com/d3/d3-scale#continuous_nice\">scale.nice()</a> to the x domain. This is a separate option instead of being one you can apply to a passed in scale because D3&#39;s &quot;nice&quot; transformation only works on existing domains and does not use a state to be able to tell if your existing scale wants to be nice.</p>\n<h3 id=\"ynice\">yNice <code>Boolean=false</code><a href=\"/guide#ynice\"> </a></h3><p>Same as <a href=\"/guide#xnice\">xNice</a> but for the y domain.</p>\n<h3 id=\"znice\">zNice <code>Boolean=false</code><a href=\"/guide#znice\"> </a></h3><p>Same as <a href=\"/guide#xnice\">xNice</a> but for the z domain.</p>\n<h3 id=\"rnice\">rNice <code>Boolean=false</code><a href=\"/guide#rnice\"> </a></h3><p>Same as <a href=\"/guide#xnice\">xNice</a> but for the r domain.</p>\n<h3 id=\"extents\">extents <code>Object</code><a href=\"/guide#extents\"> </a></h3><p>Manually set the extents of the x, y or r scale as a two-dimensional array of the min and max you want. Setting values here will skip any dynamic extent calculation of the data for that dimension.</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span>\n  <span class=\"hljs-attr\">extents</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">x:</span> [<span class=\"hljs-attr\">0</span>, <span class=\"hljs-attr\">100</span>], <span class=\"hljs-attr\">y:</span> [<span class=\"hljs-attr\">50</span>, <span class=\"hljs-attr\">100</span>] }}\n&gt;</span></code></pre></div><h3 id=\"flatdata\">flatData <code>Array</code><a href=\"/guide#flatdata\"> </a></h3><p>In order for Layer Cake to measure the extents of your data, it needs a flat array of items that the x, y and r accessors can find. If your data is not flat (often the case if your renderers prefer a nested format), you can tell it to measure extents against a flat version. This <em>will not</em> change the shape of the data that gets passed to components — it is only for extent calculation.</p>\n<blockquote>\n<p>The library also exports a flattening function to handle common use cases if you need to flatten your data and you don&#39;t already have a flat version. See the <a href=\"/guide#flatten\">flatten</a> helper function for more info.</p>\n</blockquote>\n<p>Here&#39;s an example showing passing different data formats for extent calculation versus what is used by layer components.</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> { LayerCake } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;LayerCake&#x27;</span>;\n\n  <span class=\"hljs-keyword\">const</span> data = [\n    {\n      <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;apples&#x27;</span>,\n      <span class=\"hljs-attr\">values</span>: [{<span class=\"hljs-attr\">month</span>: <span class=\"hljs-string\">&#x27;2015-03-01&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">3840</span>}, ...]\n    },\n    {\n      <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&#x27;bananas&#x27;</span>,\n      <span class=\"hljs-attr\">values</span>: [{<span class=\"hljs-attr\">month</span>: <span class=\"hljs-string\">&#x27;2015-03-01&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1920</span>}, ...]\n    },\n  ];\n\n  <span class=\"hljs-keyword\">const</span> flatData = [\n    {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-string\">&#x27;2015-03-01&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">3840</span>, <span class=\"hljs-attr\">group</span>: <span class=\"hljs-string\">&#x27;apples&#x27;</span>},\n    {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-string\">&#x27;2015-02-01&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1600</span>, <span class=\"hljs-attr\">group</span>: <span class=\"hljs-string\">&#x27;apples&#x27;</span>},\n    {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-string\">&#x27;2015-01-01&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">640</span>, <span class=\"hljs-attr\">group</span>:  <span class=\"hljs-string\">&#x27;apples&#x27;</span>},\n    {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-string\">&#x27;2015-00-01&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">320</span>, <span class=\"hljs-attr\">group</span>:  <span class=\"hljs-string\">&#x27;apples&#x27;</span>},\n\n    {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-string\">&#x27;2015-03-01&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1920</span>, <span class=\"hljs-attr\">group</span>: <span class=\"hljs-string\">&#x27;bananas&#x27;</span>},\n    {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-string\">&#x27;2015-02-01&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1440</span>, <span class=\"hljs-attr\">group</span>: <span class=\"hljs-string\">&#x27;bananas&#x27;</span>},\n    {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-string\">&#x27;2015-01-01&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">960</span>, <span class=\"hljs-attr\">group</span>:  <span class=\"hljs-string\">&#x27;bananas&#x27;</span>},\n    {<span class=\"hljs-attr\">month</span>: <span class=\"hljs-string\">&#x27;2015-00-01&#x27;</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">480</span>, <span class=\"hljs-attr\">group</span>:  <span class=\"hljs-string\">&#x27;bananas&#x27;</span>}\n  ];\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-comment\">/*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the &lt;LayerCake&gt; element will\n    expand to fill it.\n  */</span>\n  <span class=\"hljs-selector-class\">.chart-container</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">300px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;chart-container&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span>\n    <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&#x27;month&#x27;</span>\n    <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&#x27;value&#x27;</span>\n    {<span class=\"hljs-attr\">data</span>}\n    {<span class=\"hljs-attr\">flatData</span>}\n  &gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- Components go here --&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre></div><h3 id=\"ssr\">ssr <code>Boolean=false</code><a href=\"/guide#ssr\"> </a></h3><p>Set whether this chart should be rendered server side. This is best used in conjunction with the <a href=\"guide#scaledsvg\">ScaledSvg</a> component or HTML components that are set to use percentage scales since you won&#39;t know the size of the container at render time.</p>\n<p>Use it in conjunction with <a href=\"guide#percentrange\"><code>percentRange={true}</code></a> to easily set up your scales for a percent coordinate systems.</p>\n<h3 id=\"percentrange\">percentRange <code>Boolean=false</code><a href=\"/guide#percentrange\"> </a></h3><p>When rendering charts server side, you pretty much always want your scale range to be <code>[0, 100]</code> since you won&#39;t be able to base the range off of the target container&#39;s width. Use this convenience helper to set the min and max to be out of a hundred.</p>\n<blockquote>\n<p>The default range for the y-scale will be <code>[100, 0]</code> because <code>yReverse</code> defaults to <code>true</code>. All of the range reverse functions will work as usual with this.</p>\n</blockquote>\n<h3 id=\"position\">position <code>String=&#39;relative&#39;</code><a href=\"/guide#position\"> </a></h3><p>Determine the positioning of the wrapper div. Set this to <code>&#39;absolute&#39;</code> when you want to stack two <code>&lt;LayerCake&gt;</code> components on top of one another, such as when you have one that is server-side rendered and one client side like in the <a href=\"/example-ssr/Column\">Annotated column</a> example.</p>\n<h3 id=\"custom\">custom <code>Object</code><a href=\"/guide#custom\"> </a></h3><p>Any extra configuration values you want available on the LayerCake context. This could be useful for color lookups or additional constants.</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span>\n  <span class=\"hljs-attr\">custom</span>=<span class=\"hljs-string\">{</span> { <span class=\"hljs-attr\">size:</span> <span class=\"hljs-attr\">10</span>, <span class=\"hljs-attr\">names:</span> [&#x27;<span class=\"hljs-attr\">a</span>&#x27;, &#x27;<span class=\"hljs-attr\">b</span>&#x27;, &#x27;<span class=\"hljs-attr\">c</span>&#x27;] } }\n&gt;</span></code></pre></div>","metadata":{"title":"LayerCake props"},"subsections":[{"slug":"data","title":"data"},{"slug":"x","title":"x"},{"slug":"y","title":"y"},{"slug":"z","title":"z"},{"slug":"r","title":"r"},{"slug":"padding","title":"padding"},{"slug":"xscale","title":"xScale"},{"slug":"yscale","title":"yScale"},{"slug":"zscale","title":"zScale"},{"slug":"rscale","title":"rScale"},{"slug":"xdomain","title":"xDomain"},{"slug":"ydomain","title":"yDomain"},{"slug":"zdomain","title":"zDomain"},{"slug":"rdomain","title":"rDomain"},{"slug":"xreverse","title":"xReverse"},{"slug":"yreverse","title":"yReverse"},{"slug":"zreverse","title":"zReverse"},{"slug":"rreverse","title":"rReverse"},{"slug":"xrange","title":"xRange"},{"slug":"yrange","title":"yRange"},{"slug":"zrange","title":"zRange"},{"slug":"rrange","title":"rRange"},{"slug":"xpadding","title":"xPadding"},{"slug":"ypadding","title":"yPadding"},{"slug":"zpadding","title":"zPadding"},{"slug":"rpadding","title":"rPadding"},{"slug":"xnice","title":"xNice"},{"slug":"ynice","title":"yNice"},{"slug":"znice","title":"zNice"},{"slug":"rnice","title":"rNice"},{"slug":"extents","title":"extents"},{"slug":"flatdata","title":"flatData"},{"slug":"ssr","title":"ssr"},{"slug":"percentrange","title":"percentRange"},{"slug":"position","title":"position"},{"slug":"custom","title":"custom"}],"slug":"layercake-props","file":"02-layercake-props.md"},{"html":"<p>In addition to the values you set on the LayerCake component, additional properties are computed and exposed on the context.</p>\n<h3 id=\"activegetters\">activeGetters <code>Object</code><a href=\"/guide#activegetters\"> </a></h3><p>An object that has a key for each dimension of data you have provided an accessor key for and a value that is the accessor function. This used internally but it&#39;s exposed here in case it&#39;s useful.</p>\n<div class='code-block'><pre><code>{\n  x: &#x27;&lt;function&gt;&#x27;,\n  y: &#x27;&lt;function&gt;&#x27;,\n  z: &#x27;&lt;function&gt;&#x27;,\n  r: &#x27;&lt;function&gt;\n}</code></pre></div><h3 id=\"aspectratio\">aspectRatio <code>Number</code><a href=\"/guide#aspectratio\"> </a></h3><p>The aspect ratio of the chart, <code>width / height</code>. This is also exposed as a variable on the Layer Cake slot so you can access it with <code>let:aspectRatio</code>. For example, you could use it to selectively display some components over others:</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span>\n  <span class=\"hljs-attr\">let:aspectRatio</span>\n&gt;</span>\n  {#if aspectRatio &gt; 1}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayoutOne</span>/&gt;</span>\n  {:else}\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayoutTwo</span>/&gt;</span>\n  {/if}\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span></code></pre></div><h3 id=\"box\">box <code>Object</code><a href=\"/guide#box\"> </a></h3><p>A bounding box object of the parent container with <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>, <code>width</code> and <code>height</code> numbers in pixels. Useful for creating tooltips.</p>\n<h3 id=\"config\">config <code>Object</code><a href=\"/guide#config\"> </a></h3><p>A copy of some of the config properties set on the <code>&lt;LayerCake&gt;</code> component.</p>\n<p>Some of these properties get changed by the time they end up on the context object. For example, the <a href=\"/guide#x\">x</a>, <a href=\"/guide#y\">y</a>, <a href=\"/guide#z\">z</a> and <a href=\"/guide#r\">r</a> LayerCake properties can be strings or arrays but when they&#39;re exposed on the context as compued values, they are always a function. Sometimes, it&#39;s useful to refer to those original props such as in the <a href=\"/example/ClevelandDotPlot\">Cleveland Dot Plot example</a>, which uses the x accessor shorthand of providing a list of keys.</p>\n<p>Or, <a href=\"/guide#xdomain\">xDomain</a> and the other domain props can be used to set manual limits on the min or max of the domain scale. This can be different from what gets set on the context <a href=\"/guide#xdomain\">xDomain</a> if the prop value contained any <code>null</code> values. If you want to refer to the original value for any reason, it&#39;s set on this object.</p>\n<p>Having access to this field can help you not repeat yourself in specifying things twice or in scenarios where Layer Cake is doing a transformation on that original value, like in accessors or domain inputs, and you want to know about the original value.</p>\n<h3 id=\"containerwidth\">containerWidth <code>Number</code><a href=\"/guide#containerwidth\"> </a></h3><p>The width of the parent container, the div element that contains the <code>&lt;LayerCake&gt;</code> component. This is also exposed as a variable on the Layer Cake slot so you can access it with <code>let:containerWidth</code>.</p>\n<h3 id=\"containerheight\">containerHeight <code>Number</code><a href=\"/guide#containerheight\"> </a></h3><p>The height of the parent container, the div element that contains the <code>&lt;LayerCake&gt;</code> component. This is also exposed as a variable on the Layer Cake slot so you can access it with <code>let:containerHeight</code>.</p>\n<h3 id=\"extents-1\">extents <code>Object</code><a href=\"/guide#extents-1\"> </a></h3><p>An object containing a key for x, y or r (if any are set), whose value is two-value array representing the min and max values for that field in the data.</p>\n<p>This value could differ from the domain of your scale if you are manually setting a limit on your scale by setting any of the <code>xDomain</code>, <code>yDomain</code>, <code>zDomain</code> or <code>rDomain</code> settings. This is used internally to set domain things but it&#39;s also useful as a reference if you want to toggle between an arbitrary domain and the measured extents of the data, such as in the <a href=\"/example/SmallMultiples\">small multiples example</a>.</p>\n<div class='code-block'><pre><code>{\n  <span class=\"hljs-attr\">x</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">235</span>],\n  <span class=\"hljs-attr\">y</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">80</span>],\n  <span class=\"hljs-attr\">z</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">90</span>],\n  <span class=\"hljs-attr\">r</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">35</span>]\n}</code></pre></div><h3 id=\"width\">width <code>Number</code><a href=\"/guide#width\"> </a></h3><p>The width of the drawable space for the chart. This is the width of the parent container taking into account any margin. This is also exposed as a variable on the Layer Cake slot so you can access it with <code>let:width</code>.</p>\n<h3 id=\"height\">height <code>Number</code><a href=\"/guide#height\"> </a></h3><p>The width of the drawable space for the chart. This is the height of the parent container taking into account any margin. This is also exposed as a variable on the Layer Cake slot so you can access it with <code>let:height</code>.</p>\n<h3 id=\"x-1\">x <code>Function</code><a href=\"/guide#x-1\"> </a></h3><p>The x accessor. This will always be a function regardless of whether you passed in a string or an array as a prop. If you passed in an array, it will return an array of equal length.</p>\n<div class='code-block'><pre><code>&lt;LayerCake\n  x=&#x27;x&#x27;\n  &lt;!-- equivalent to --&gt;\n  x={ d =&gt; d.x }\n&gt;</code></pre></div><div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> { getContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;svelte&#x27;</span>;\n  <span class=\"hljs-keyword\">const</span> { data, x, y } = getContext(<span class=\"hljs-string\">&#x27;LayerCake&#x27;</span>);\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n{#each $data as d}\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">circle</span>\n    <span class=\"hljs-attr\">cx</span>=<span class=\"hljs-string\">&quot;{$xScale($x(d))}&quot;</span>\n    <span class=\"hljs-attr\">cy</span>=<span class=\"hljs-string\">&quot;{$yScale($y(d))}&quot;</span>\n  /&gt;</span>\n{/each}</code></pre></div><h3 id=\"y-1\">y <code>Function</code><a href=\"/guide#y-1\"> </a></h3><p>Same as <a href=\"/guide#x-1\">x</a> but for the y dimension.</p>\n<h3 id=\"z-1\">z <code>Function</code><a href=\"/guide#z-1\"> </a></h3><p>Same as <a href=\"/guide#x-1\">x</a> but for the z dimension.</p>\n<h3 id=\"r-1\">r <code>Function</code><a href=\"/guide#r-1\"> </a></h3><p>Same as <a href=\"/guide#x-1\">x</a> but for the r dimension.</p>\n<h3 id=\"xdomain-1\">xDomain <code>Array:[min: Number, max: Number]</code><a href=\"/guide#xdomain-1\"> </a></h3><p>The calculated extent of the x-dimension of the data. This is the extent of the data taking into account any manual settings passed in for <a href=\"/guide#xdomain\">xDomain</a>.</p>\n<p>For example, if the extent of the data is <code>[10, 100]</code> and you set the xDomain prop to <code>[0, null]</code>, the xDomain on the context value is <code>[0, 100]</code>.</p>\n<p>It&#39;s equivalent to calling <code>$xScale.domain()</code>.</p>\n<h3 id=\"ydomain-1\">yDomain <code>Array:[min: Number, max: Number]</code><a href=\"/guide#ydomain-1\"> </a></h3><p>Same as <a href=\"/guide#xdomain-1\">xDomain</a> above but for the y domain.</p>\n<h3 id=\"zdomain-1\">zDomain <code>Array:[min: Number, max: Number]</code><a href=\"/guide#zdomain-1\"> </a></h3><p>Same as <a href=\"/guide#xdomain-1\">xDomain</a> above but for the z domain.</p>\n<h3 id=\"rdomain-1\">rDomain <code>Array:[min: Number, max: Number]</code><a href=\"/guide#rdomain-1\"> </a></h3><p>Same as <a href=\"/guide#xdomain-1\">xDomain</a> above but for the r domain.</p>\n<h3 id=\"xrange-1\">xRange <code>Array:[min: Number, max: Number]</code><a href=\"/guide#xrange-1\"> </a></h3><p>The range used for the x-scale. This is usually <code>[0, width]</code> unless it&#39;s been manually set via the <a href=\"/guide#xrange\">xRange</a> prop.</p>\n<p>It&#39;s equivalent to calling <code>$xScale.range()</code>.</p>\n<h3 id=\"yrange-1\">yRange <code>Array:[min: Number, max: Number]</code><a href=\"/guide#yrange-1\"> </a></h3><p>Same as <a href=\"/guide#xrange-1\">xRange</a> above but for the y domain.</p>\n<h3 id=\"zrange-1\">zRange <code>Array:[min: Number, max: Number]</code><a href=\"/guide#zrange-1\"> </a></h3><p>Same as <a href=\"/guide#xrange-1\">xRange</a> above but for the z domain.</p>\n<h3 id=\"rrange-1\">rRange <code>Array:[min: Number, max: Number]</code><a href=\"/guide#rrange-1\"> </a></h3><p>Same as <a href=\"/guide#xrange-1\">xRange</a> above but for the r domain.</p>\n<h3 id=\"xget\">xGet<span class=\"call\">(<span class=\"arguments\">d: <code>Object</code></span>)</span><a href=\"/guide#xget\"> </a></h3><p>Often you want to get the x value from a row in your data and scale it like so: <code>$xScale($x(d))</code>. This function is shorthand for doing just that. Super handy!</p>\n<p>Here&#39;s an example from a simple SVG line path generator:</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">import</span> { getContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;svelte&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> { data, xGet, yGet } = getContext(<span class=\"hljs-string\">&#x27;LayerCake&#x27;</span>);\n\n$: path=  <span class=\"hljs-string\">&#x27;M&#x27;</span> + $data\n  .map(<span class=\"hljs-function\"><span class=\"hljs-params\">d</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> $xGet(d) + <span class=\"hljs-string\">&#x27;,&#x27;</span> + $yGet(d);\n  })\n  .join(<span class=\"hljs-string\">&#x27;L&#x27;</span>);</code></pre></div><h3 id=\"yget\">yGet<span class=\"call\">(<span class=\"arguments\">d: <code>Object</code></span>)</span><a href=\"/guide#yget\"> </a></h3><p>Same as <a href=\"/guide#xget\">xGet</a> but for the y scale.</p>\n<h3 id=\"zget\">zGet<span class=\"call\">(<span class=\"arguments\">d: <code>Object</code></span>)</span><a href=\"/guide#zget\"> </a></h3><p>Same as <a href=\"/guide#xget\">xGet</a> but for the z scale.</p>\n<h3 id=\"rget\">rGet<span class=\"call\">(<span class=\"arguments\">d: <code>Object</code></span>)</span><a href=\"/guide#rget\"> </a></h3><p>Same as <a href=\"/guide#xget\">xGet</a> but for the r scale.</p>\n<h3 id=\"xscale-1\">xScale<span class=\"call\">(<span class=\"arguments\">d: <code>Object</code></span>)</span><a href=\"/guide#xscale-1\"> </a></h3><p>The calculated scale for the x dimension.</p>\n<h3 id=\"yscale-1\">yScale<span class=\"call\">(<span class=\"arguments\">d: <code>Object</code></span>)</span><a href=\"/guide#yscale-1\"> </a></h3><p>Same as the above but for the y dimension.</p>\n<h3 id=\"zscale-1\">zScale<span class=\"call\">(<span class=\"arguments\">d: <code>Object</code></span>)</span><a href=\"/guide#zscale-1\"> </a></h3><p>Same as the above but for the z dimension.</p>\n<h3 id=\"rscale-1\">rScale<span class=\"call\">(<span class=\"arguments\">d: <code>Object</code></span>)</span><a href=\"/guide#rscale-1\"> </a></h3><p>Same as the above but for the r dimension.</p>\n","metadata":{"title":"Computed context values"},"subsections":[{"slug":"activegetters","title":"activeGetters"},{"slug":"aspectratio","title":"aspectRatio"},{"slug":"box","title":"box"},{"slug":"config","title":"config"},{"slug":"containerwidth","title":"containerWidth"},{"slug":"containerheight","title":"containerHeight"},{"slug":"extents-1","title":"extents"},{"slug":"width","title":"width"},{"slug":"height","title":"height"},{"slug":"x-1","title":"x"},{"slug":"y-1","title":"y"},{"slug":"z-1","title":"z"},{"slug":"r-1","title":"r"},{"slug":"xdomain-1","title":"xDomain"},{"slug":"ydomain-1","title":"yDomain"},{"slug":"zdomain-1","title":"zDomain"},{"slug":"rdomain-1","title":"rDomain"},{"slug":"xrange-1","title":"xRange"},{"slug":"yrange-1","title":"yRange"},{"slug":"zrange-1","title":"zRange"},{"slug":"rrange-1","title":"rRange"},{"slug":"xget","title":"xGet(...)"},{"slug":"yget","title":"yGet(...)"},{"slug":"zget","title":"zGet(...)"},{"slug":"rget","title":"rGet(...)"},{"slug":"xscale-1","title":"xScale(...)"},{"slug":"yscale-1","title":"yScale(...)"},{"slug":"zscale-1","title":"zScale(...)"},{"slug":"rscale-1","title":"rScale(...)"}],"slug":"computed-context-values","file":"03-computed-context-values.md"},{"html":"<p>Layer Cake comes with layout components that provide HTML, Svg, ScaledSvg, Canvas and WebGL containers for your custom components.</p>\n<p>You must wrap your chart components in these layout components for them to appear properly scaled. For Html and Svg components, they create a <code>&lt;div&gt;</code> and <code>&lt;g&gt;</code>, respectively.</p>\n<p>The Canvas and WebGL layout components also create canvas contexts that are then available on the LayerCake context object.</p>\n<p>Each of these components also takes props. See the next section <a href=\"/guide#layout-component-props\">Layout component props</a> for more info.</p>\n<p>Here are the four layout components: HTML, Svg, ScaledSvg, Canvas and WebGL containers.</p>\n<h3 id=\"html\">Html<a href=\"/guide#html\"> </a></h3><div class='code-block named'><span class='filename'> App.svelte</span><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> { LayerCake, Html } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;layercake&#x27;</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-comment\">/*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the &lt;LayerCake&gt; element will\n    expand to fill it.\n  */</span>\n  <span class=\"hljs-selector-class\">.chart-container</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">300px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;chart-container&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span> <span class=\"hljs-attr\">...</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Html</span> <span class=\"hljs-attr\">zIndex</span>=<span class=\"hljs-string\">{1}</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- Optional z-index --&gt;</span>\n      ...\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Html</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre></div><h3 id=\"svg\">Svg<a href=\"/guide#svg\"> </a></h3><p>The SVG layout component also accepts a <code>viewBox</code> prop. See the <a href=\"/guide#layout-component-props\">Layout component props</a> section for more information.</p>\n<div class='code-block named'><span class='filename'> App.svelte</span><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> { LayerCake, Svg } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;layercake&#x27;</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-comment\">/*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the &lt;LayerCake&gt; element will\n    expand to fill it.\n  */</span>\n  <span class=\"hljs-selector-class\">.chart-container</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">300px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;chart-container&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span> <span class=\"hljs-attr\">...</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Svg</span> <span class=\"hljs-attr\">zIndex</span>=<span class=\"hljs-string\">{2}</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- Optional z-index --&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Svg</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre></div><p>This component also has a <a href=\"https://svelte.dev/docs#slot_name\">named slot</a> for adding elements into the SVG <code>&lt;defs&gt;</code> field.</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;chart-container&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span> <span class=\"hljs-attr\">...</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Svg</span>&gt;</span>\n\n      <span class=\"hljs-comment\">&lt;!-- Add your defs in a named slot here --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svelte:fragment</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">&quot;defs&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">linearGradient</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;myGradient&quot;</span> <span class=\"hljs-attr\">gradientTransform</span>=<span class=\"hljs-string\">&quot;rotate(90)&quot;</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">stop</span> <span class=\"hljs-attr\">offset</span>=<span class=\"hljs-string\">&quot;20%&quot;</span> <span class=\"hljs-attr\">stop-color</span>=<span class=\"hljs-string\">&quot;gold&quot;</span> /&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">stop</span> <span class=\"hljs-attr\">offset</span>=<span class=\"hljs-string\">&quot;90%&quot;</span> <span class=\"hljs-attr\">stop-color</span>=<span class=\"hljs-string\">&quot;red&quot;</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">linearGradient</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svelte:fragment</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Svg</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre></div><h3 id=\"scaledsvg\">ScaledSvg<a href=\"/guide#scaledsvg\"> </a></h3><p>Use this when you want to render SVGs server side, using Rich Harris&#39;s <a href=\"https://dev.to/richharris/a-new-technique-for-making-responsive-javascript-free-charts-gmp\">Pancake technique</a>.</p>\n<p>It&#39;s often used in conjunction with props <code>ssr={true}</code> and <code>percentRange={true}</code>. </p>\n<p>The ScaledSvg component has two custom props: <code>fixedAspectRatio</code> and <code>viewBox</code>. See the <a href=\"/guide#layout-component-props\">Layout component props</a> section for more information.</p>\n<div class='code-block named'><span class='filename'> App.svelte</span><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> { LayerCake, ScaledSvg } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;layercake&#x27;</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-comment\">/*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the &lt;LayerCake&gt; element will\n    expand to fill it.\n  */</span>\n  <span class=\"hljs-selector-class\">.chart-container</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">300px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;chart-container&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span>\n    <span class=\"hljs-attr\">ssr</span>=<span class=\"hljs-string\">{true}</span>\n    <span class=\"hljs-attr\">percentRange</span>=<span class=\"hljs-string\">{true}</span>\n  &gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ScaledSvg</span> <span class=\"hljs-attr\">fixedAspectRatio</span>=<span class=\"hljs-string\">{16/9}</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- Optional fixed aspect ratio --&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ScaledSvg</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre></div><p>This component also has a <a href=\"https://svelte.dev/docs#slot_name\">named slot</a> for adding elements into the SVG <code>&lt;defs&gt;</code> field.</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;chart-container&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span> <span class=\"hljs-attr\">...</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Svg</span>&gt;</span>\n\n      <span class=\"hljs-comment\">&lt;!-- Add your defs in a named slot here --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svelte:fragment</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">&quot;defs&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">linearGradient</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;myGradient&quot;</span> <span class=\"hljs-attr\">gradientTransform</span>=<span class=\"hljs-string\">&quot;rotate(90)&quot;</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">stop</span> <span class=\"hljs-attr\">offset</span>=<span class=\"hljs-string\">&quot;20%&quot;</span> <span class=\"hljs-attr\">stop-color</span>=<span class=\"hljs-string\">&quot;gold&quot;</span> /&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">stop</span> <span class=\"hljs-attr\">offset</span>=<span class=\"hljs-string\">&quot;90%&quot;</span> <span class=\"hljs-attr\">stop-color</span>=<span class=\"hljs-string\">&quot;red&quot;</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">linearGradient</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svelte:fragment</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Svg</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre></div><h3 id=\"canvas\">Canvas<a href=\"/guide#canvas\"> </a></h3><div class='code-block named'><span class='filename'> App.svelte</span><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> { LayerCake, Canvas } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;layercake&#x27;</span>;\n\n  <span class=\"hljs-keyword\">import</span> CanvasLayer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./components/CanvasLayer.svelte&#x27;</span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-comment\">/*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the &lt;LayerCake&gt; element will\n    expand to fill it.\n  */</span>\n  <span class=\"hljs-selector-class\">.chart-container</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">300px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;chart-container&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span> <span class=\"hljs-attr\">...</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Canvas</span> <span class=\"hljs-attr\">zIndex</span>=<span class=\"hljs-string\">{3}</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- Optional z-index --&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CanvasLayer</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Canvas</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre></div><p>In the component, you access the canvas context with <code>const { ctx } = getContext(&#39;canvas&#39;);</code>. This value is on a different context from the <code>getContext(&#39;LayerCake&#39;)</code> one because you could have multiple canvas layers and there wouldn&#39;t be an easy way to grab the right one. This way, the component always has access to just its parent Canvas component.</p>\n<blockquote>\n<p>Since the <code>ctx</code> value is a normal 2d context, the underlying canvas element is accessible under <code>ctx.canvas</code>.</p>\n</blockquote>\n<p>Here&#39;s an example showing a scatter plot.</p>\n<div class='code-block named'><span class='filename'> ./components/CanvasLayer.svelte</span><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> { getContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;svelte&#x27;</span>;\n  <span class=\"hljs-keyword\">import</span> { scaleCanvas } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;layercake&#x27;</span>;\n\n  <span class=\"hljs-keyword\">const</span> { data, xGet, yGet, width, height } = getContext(<span class=\"hljs-string\">&#x27;LayerCake&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> { ctx } = getContext(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>);\n\n  $: {\n    <span class=\"hljs-keyword\">if</span> ($ctx) {\n      <span class=\"hljs-comment\">/* --------------------------------------------\n       * If you were to have multiple canvas layers\n       * maybe for some artistic layering purposes\n       * put these reset functions in the first layer, not each one\n       * since they should only run once per update\n       */</span>\n      scaleCanvas($ctx, $width, $height);\n      $ctx.clearRect(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, $width, $height);\n\n      <span class=\"hljs-comment\">/* --------------------------------------------\n       * Draw the scatterplot\n       */</span>\n      $data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">d</span> =&gt;</span> {\n        $ctx.beginPath();\n        $ctx.arc($xGet(d), $yGet(d), <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">Math</span>.PI, <span class=\"hljs-literal\">false</span>);\n        $ctx.fillStyle = <span class=\"hljs-string\">&#x27;#f0c&#x27;</span>;\n        $ctx.fill();\n      });\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre></div><h3 id=\"webgl\">WebGL<a href=\"/guide#webgl\"> </a></h3><div class='code-block named'><span class='filename'> App.svelte</span><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> { LayerCake, WebGL } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;layercake&#x27;</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-comment\">/*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the &lt;LayerCake&gt; element will\n    expand to fill it.\n  */</span>\n  <span class=\"hljs-selector-class\">.chart-container</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">300px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;chart-container&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span> <span class=\"hljs-attr\">...</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WebGL</span> <span class=\"hljs-attr\">zIndex</span>=<span class=\"hljs-string\">{4}</span>&gt;</span> <span class=\"hljs-comment\">&lt;!-- Optional z-index --&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">WebGL</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre></div><p>In the component, you access the canvas context with <code>const { gl } = getContext(&#39;gl&#39;);</code>. This value is on a different context from the <code>getContext(&#39;LayerCake&#39;)</code> one because you could have multiple WebGL layers and there wouldn&#39;t be an easy way to grab the right one.</p>\n<blockquote>\n<p>Since the <code>gl</code> value is a normal WebGL context, the underlying canvas element is accessible under <code>gl.canvas</code>.</p>\n</blockquote>\n<p>See the <a href=\"/example/ScatterWebgl\">WebGL scatter chart</a> for a working example.</p>\n","metadata":{"title":"Layout components"},"subsections":[{"slug":"html","title":"Html"},{"slug":"svg","title":"Svg"},{"slug":"scaledsvg","title":"ScaledSvg"},{"slug":"canvas","title":"Canvas"},{"slug":"webgl","title":"WebGL"}],"slug":"layout-components","file":"04-layout-components.md"},{"html":"<p>All layout components accept the following props:</p>\n<ul>\n<li><a href=\"guide#zindex-1\">zIndex</a> <code>Number|String</code></li>\n<li><a href=\"guide#pointerevents-1\">pointerEvents</a> <code>Boolean</code></li>\n</ul>\n<p>The Svg and ScaledSvg layout components also accept:</p>\n<ul>\n<li><a href=\"guide#viewbox-1\">viewBox</a> <code>String</code></li>\n</ul>\n<p>And ScaledSvg additionally accepts:</p>\n<ul>\n<li><a href=\"guide#fixedaspectratio-1\">fixedAspectRatio</a> <code>Number</code></li>\n</ul>\n<p>The WebGL Component accepts:</p>\n<ul>\n<li><a href=\"guide#contextattributes-1\">contextAttributes</a> <code>Object</code></li>\n</ul>\n<p>Each layout component also export an <code>element</code> prop that you can bind to and represents the HTML element that wraps the layout component. These are also available as slot props.</p>\n<ul>\n<li>In the <code>Html</code> component, <code>element</code> equals the <code>&lt;div&gt;</code> tag.</li>\n<li>In the <code>Svg</code> component, <code>element</code> equals the <code>&lt;svg&gt;</code> tag.</li>\n<li>In the <code>ScaledSvg</code> component, <code>element</code> equals the <code>&lt;svg&gt;</code> tag.</li>\n<li>In the <code>Canvas</code> component, <code>element</code> equals the <code>&lt;canvas&gt;</code> tag.</li>\n<li>In the <code>WebGL</code> component, <code>element</code> equals the <code>&lt;canvas&gt;</code> tag.</li>\n</ul>\n<p>The <code>Canvas</code> and the <code>WebGL</code> components also export a <code>context</code> variable that you can bind to and is also available as a slot prop.</p>\n<ul>\n<li>In the <code>Canvas</code> component, <code>context</code> equals <code>element.getContext(&#39;2d&#39;)</code>.</li>\n<li>In the <code>WebGL</code> component, <code>context</code> equals <code>element.getContext(&#39;webgl&#39;)</code>.</li>\n</ul>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n <span class=\"hljs-keyword\">let</span> svgElement;\n <span class=\"hljs-keyword\">let</span> canvasElement;\n <span class=\"hljs-keyword\">let</span> canvasContext\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span> <span class=\"hljs-attr\">...</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Svg</span>\n    <span class=\"hljs-attr\">bind:element</span>=<span class=\"hljs-string\">{svgElement}</span>\n    <span class=\"hljs-attr\">let:element</span>\n  &gt;</span>\n    {console.log(svgElement === element)} \n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Svg</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Canvas</span>\n    <span class=\"hljs-attr\">bind:element</span>=<span class=\"hljs-string\">{canvasElement}</span>\n    <span class=\"hljs-attr\">bind:context</span>=<span class=\"hljs-string\">{canvasContext}</span>\n    <span class=\"hljs-attr\">let:element</span>\n    <span class=\"hljs-attr\">let:context</span>\n  &gt;</span>\n    {console.log(canvasElement === element)} \n    {console.log(canvasContext === context)} \n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Canvas</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span></code></pre></div><h3 id=\"zindex\">zIndex <code>Number|String</code><a href=\"/guide#zindex\"> </a></h3><p>This lets you fine-tune your layering and is useful if you want your layers to build in a certain order but have a different appearance than their DOM order.</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span> <span class=\"hljs-attr\">...</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Svg</span>\n    <span class=\"hljs-attr\">zIndex</span>=<span class=\"hljs-string\">{2}</span>\n  &gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Svg</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span></code></pre></div><h3 id=\"pointerevents\">pointerEvents <code>Boolean</code><a href=\"/guide#pointerevents\"> </a></h3><p>Useful for tooltip layers that need to be display above chart elements but not capture mouse events. Defaults to no <code>pointer-events</code> CSS being set. Set to <code>false</code> to set <code>pointer-events: none;</code></p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span> <span class=\"hljs-attr\">...</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Html</span>\n    <span class=\"hljs-attr\">pointerEvents</span>=<span class=\"hljs-string\">{false}</span>\n  &gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span></code></pre></div><h3 id=\"viewbox\">viewBox <code>String</code><a href=\"/guide#viewbox\"> </a></h3><p>On Svg components, this defaults to <code>undefined</code> and <code>0 0 100 100</code> for ScaledSvg.</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span> <span class=\"hljs-attr\">...</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Svg</span>\n    <span class=\"hljs-attr\">viewBox</span>=<span class=\"hljs-string\">&#x27;0 0 100 50&#x27;</span>\n  &gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Svg</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span></code></pre></div><h3 id=\"fixedaspectratio\">fixedAspectRatio <code>Number</code><a href=\"/guide#fixedaspectratio\"> </a></h3><p>For ScaledSvg components, you can pass in a set aspect ratio. See the <a href=\"/example-ssr/MapSvg\">server-side rendered Map</a> for an example.</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span> <span class=\"hljs-attr\">...</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ScaledSvg</span>\n    <span class=\"hljs-attr\">fixedAspectRatio</span>=<span class=\"hljs-string\">{16/9}</span>\n  &gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ScaledSvg</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span></code></pre></div><h3 id=\"contextattributes\">contextAttributes <code>Object</code><a href=\"/guide#contextattributes\"> </a></h3><p>For WebGL components, you can pass in an object that gets passed as the second argument to <code>canvas.getContext()</code>. See the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\">WebGL docs</a> for more details on what those attributes can be.</p>\n<div class='code-block'><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LayerCake</span> <span class=\"hljs-attr\">...</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">WebGL</span>\n    <span class=\"hljs-attr\">contextAttributes</span>=<span class=\"hljs-string\">{{</span>\n      <span class=\"hljs-attr\">antialias:</span> <span class=\"hljs-attr\">false</span>,\n      <span class=\"hljs-attr\">depth:</span> <span class=\"hljs-attr\">false</span>,\n      <span class=\"hljs-attr\">alpha:</span> <span class=\"hljs-attr\">false</span>\n    }}\n  &gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">WebGL</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LayerCake</span>&gt;</span></code></pre></div>","metadata":{"title":"Layout component props"},"subsections":[{"slug":"zindex","title":"zIndex"},{"slug":"pointerevents","title":"pointerEvents"},{"slug":"viewbox","title":"viewBox"},{"slug":"fixedaspectratio","title":"fixedAspectRatio"},{"slug":"contextattributes","title":"contextAttributes"}],"slug":"layout-component-props","file":"05-layout-component-props.md"},{"html":"<p>Layer Cake exposes some commonly-used helper functions. If you don&#39;t use them, they will be tree-shaken so there&#39;s no added bloat!</p>\n<h3 id=\"flatten\">flatten<span class=\"call\">(<span class=\"arguments\">data: <code>Array</code></span>)</span><a href=\"/guide#flatten\"> </a></h3><p>Flatten an array one-level down. Handy for preparing data from stacked layouts whose extents can easily be calculated.</p>\n<p>This data:</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">const</span> data = [\n  [{<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">1</span>}, {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">5</span>}, {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">10</span>}],\n  [{<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">10</span>}, {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">15</span>}, {<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">20</span>}]\n];</code></pre></div><p>Becomes this:</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">import</span> { flatten } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;layercake&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> flatData = flatten(data);\n<span class=\"hljs-comment\">/*\n  [{x: 0, y: 1}, {x: 1, y: 5}, {x: 2, y: 10},\n   {x: 0, y: 10}, {x: 1, y: 15}, {x: 2, y: 20}]\n*/</span></code></pre></div><p>You can safely use this function on arrays of arrays of arrays, such as the output from <code>d3.stack()</code></p>\n<div class='code-block'><pre><code>[\n  [[   <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3840</span>], [   <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1600</span>], [   <span class=\"hljs-number\">0</span>,  <span class=\"hljs-number\">640</span>], [   <span class=\"hljs-number\">0</span>,  <span class=\"hljs-number\">320</span>]],\n  [[<span class=\"hljs-number\">3840</span>, <span class=\"hljs-number\">5760</span>], [<span class=\"hljs-number\">1600</span>, <span class=\"hljs-number\">3040</span>], [ <span class=\"hljs-number\">640</span>, <span class=\"hljs-number\">1600</span>], [ <span class=\"hljs-number\">320</span>,  <span class=\"hljs-number\">800</span>]],\n  [[<span class=\"hljs-number\">5760</span>, <span class=\"hljs-number\">6720</span>], [<span class=\"hljs-number\">3040</span>, <span class=\"hljs-number\">4000</span>], [<span class=\"hljs-number\">1600</span>, <span class=\"hljs-number\">2240</span>], [ <span class=\"hljs-number\">800</span>, <span class=\"hljs-number\">1440</span>]],\n  [[<span class=\"hljs-number\">6720</span>, <span class=\"hljs-number\">7120</span>], [<span class=\"hljs-number\">4000</span>, <span class=\"hljs-number\">4400</span>], [<span class=\"hljs-number\">2240</span>, <span class=\"hljs-number\">2640</span>], [<span class=\"hljs-number\">1440</span>, <span class=\"hljs-number\">1840</span>]]\n]</code></pre></div><p>Becomes...</p>\n<div class='code-block'><pre><code>[ [ <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3840</span> ],\n  [ <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1600</span> ],\n  [ <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">640</span> ],\n  [ <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">320</span> ],\n  [ <span class=\"hljs-number\">3840</span>, <span class=\"hljs-number\">5760</span> ],\n  [ <span class=\"hljs-number\">1600</span>, <span class=\"hljs-number\">3040</span> ],\n  [ <span class=\"hljs-number\">640</span>, <span class=\"hljs-number\">1600</span> ],\n  [ <span class=\"hljs-number\">320</span>, <span class=\"hljs-number\">800</span> ],\n  [ <span class=\"hljs-number\">5760</span>, <span class=\"hljs-number\">6720</span> ],\n  [ <span class=\"hljs-number\">3040</span>, <span class=\"hljs-number\">4000</span> ],\n  [ <span class=\"hljs-number\">1600</span>, <span class=\"hljs-number\">2240</span> ],\n  [ <span class=\"hljs-number\">800</span>, <span class=\"hljs-number\">1440</span> ],\n  [ <span class=\"hljs-number\">6720</span>, <span class=\"hljs-number\">7120</span> ],\n  [ <span class=\"hljs-number\">4000</span>, <span class=\"hljs-number\">4400</span> ],\n  [ <span class=\"hljs-number\">2240</span>, <span class=\"hljs-number\">2640</span> ],\n  [ <span class=\"hljs-number\">1440</span>, <span class=\"hljs-number\">1840</span> ]\n]</code></pre></div><h3 id=\"scalecanvas\">scaleCanvas<span class=\"call\">(<span class=\"arguments\">ctx: <code>Canvas 2d Context</code>, width: <code>Number</code>, height: <code>Number</code></span>)</span><a href=\"/guide#scalecanvas\"> </a></h3><p>Scale your canvas size to retina screens. This function will modify the canvas, if necessary, and return an object with the new <code>width</code> and <code>height</code> as properties.</p>\n<p>Such as in the <a href=\"/example/Scatter\">Scatter canvas</a> example:</p>\n<div class='code-block named'><span class='filename'> Scatter.html</span><pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> { getContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;svelte&#x27;</span>;\n  <span class=\"hljs-keyword\">import</span> { scaleCanvas } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;layercake&#x27;</span>;\n\n  <span class=\"hljs-keyword\">const</span> { data, xGet, yGet, width, height } = getContext(<span class=\"hljs-string\">&#x27;LayerCake&#x27;</span>);\n\n  <span class=\"hljs-keyword\">const</span> { ctx } = getContext(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>);\n\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> r;\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> fill;\n\n  $: {\n    <span class=\"hljs-keyword\">if</span> ($ctx) {\n      <span class=\"hljs-comment\">/* --------------------------------------------\n       * If you were to have multiple canvas layers\n       * maybe for some artistic layering purposes\n       * put these reset functions in the first layer, not each one\n       * since they should only run once per update\n       */</span>\n      scaleCanvas($ctx, $width, $height);\n      $ctx.clearRect(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, $width, $height);\n\n      <span class=\"hljs-comment\">/* --------------------------------------------\n       * Draw our scatterplot\n       */</span>\n      $data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">d</span> =&gt;</span> {\n        $ctx.beginPath();\n        $ctx.arc($xGet(d), $yGet(d), r, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">Math</span>.PI, <span class=\"hljs-literal\">false</span>);\n        $ctx.fillStyle = fill;\n        $ctx.fill();\n      });\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre></div><h3 id=\"calcextents\">calcExtents<span class=\"call\">(<span class=\"arguments\">flatData: <code>Array</code>, fields: <code>Object</code></span>)</span><a href=\"/guide#calcextents\"> </a></h3><p>Calculate the extents of any of the keys specified in <strong>fields</strong>, which is an object whose keys represent the name of the dimension (<code>x</code>, <code>y</code>, <code>z</code> or <code>r</code>) and whose values are an accessor function.</p>\n<p>For example, calculating the extents for the x and y fields, which are in the data as <code>myX</code> and <code>myY</code> would look like this:</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">const</span> extents = calcExtents(flatData, {\n  <span class=\"hljs-attr\">x</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">d</span> =&gt;</span> d.myX,\n  <span class=\"hljs-attr\">y</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">d</span> =&gt;</span> d.myY\n});\n\n<span class=\"hljs-built_in\">console</span>.log(extents);\n<span class=\"hljs-comment\">/*\n{\n  x: [0, 10],\n  y: [-20, 20]\n}\n*/</span></code></pre></div><p>Returns an object whose keys are the field names specified as the first item in the key group array followed by an array of <code>[min, max]</code>.</p>\n<p>You can also return an array if you have an object with keys where each one is more logically associated with the min or the max like this:</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">const</span> timeData = [{ <span class=\"hljs-attr\">start</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">end</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">start</span>: -<span class=\"hljs-number\">10000</span>, <span class=\"hljs-attr\">end</span>: <span class=\"hljs-number\">0</span> }];\n\n<span class=\"hljs-keyword\">const</span> extents = calcExtents(timeData, {\n  <span class=\"hljs-attr\">y</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">d</span> =&gt;</span> [d.start, d.end]\n});\n\n<span class=\"hljs-built_in\">console</span>.log(extents);\n<span class=\"hljs-comment\">/*\n{\n  y: [-10000, 1]\n}\n*/</span></code></pre></div><h3 id=\"uniques\">uniques<span class=\"call\">(<span class=\"arguments\">data: <code>Array</code>[, accessor: <code>String|Function</code>, transform: <code>Boolean</code>]</span>)</span><a href=\"/guide#uniques\"> </a></h3><p>A function to get the unique values from a list. If <strong>accessor</strong> is specified, the uniqueness will be compared using that and, by default, the values in the returned list of unique values will be values returned by the accessor. Accessor can also be the string name of the key. Pass <code>false</code> to the <strong>transform</strong> argument if you want to return the original elements, which will be the first one that appears for every unique value. The default for <strong>transform</strong> is <code>true</code>.</p>\n<p>This is different from Underscore&#39;s <a href=\"https://underscorejs.org/#uniq\">uniq</a> because that function doesn&#39;t return the transformed value.</p>\n<div class='code-block'><pre><code><span class=\"hljs-keyword\">import</span> { uniques } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;layercake&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> data = [\n  { <span class=\"hljs-attr\">year</span>: <span class=\"hljs-string\">&#x27;1990&#x27;</span>, <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">1</span>},\n  { <span class=\"hljs-attr\">year</span>: <span class=\"hljs-string\">&#x27;1990&#x27;</span>, <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">4</span>},\n  { <span class=\"hljs-attr\">year</span>: <span class=\"hljs-string\">&#x27;1991&#x27;</span>, <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">5</span>},\n  { <span class=\"hljs-attr\">year</span>: <span class=\"hljs-string\">&#x27;1991&#x27;</span>, <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">6</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">1</span>},\n  { <span class=\"hljs-attr\">year</span>: <span class=\"hljs-string\">&#x27;1992&#x27;</span>, <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">6</span>},\n  { <span class=\"hljs-attr\">year</span>: <span class=\"hljs-string\">&#x27;1992&#x27;</span>, <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">7</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">3</span>},\n  { <span class=\"hljs-attr\">year</span>: <span class=\"hljs-string\">&#x27;1993&#x27;</span>, <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">7</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">8</span>},\n  { <span class=\"hljs-attr\">year</span>: <span class=\"hljs-string\">&#x27;1993&#x27;</span>, <span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">2</span>}\n];\n\n<span class=\"hljs-keyword\">const</span> uniqueYears = unique(data, <span class=\"hljs-string\">&#x27;year&#x27;</span>);\n<span class=\"hljs-comment\">// [&#x27;1990&#x27;, &#x27;1991&#x27;, &#x27;1992&#x27;, &#x27;1993&#x27;]</span>\n\n<span class=\"hljs-comment\">// this is equivalent to</span>\n<span class=\"hljs-keyword\">const</span> uniqueYears = unique(data, <span class=\"hljs-function\"><span class=\"hljs-params\">d</span> =&gt;</span> d.year);\n\n<span class=\"hljs-comment\">// setting transform to `false` gives you the full row of the first unique element</span>\n<span class=\"hljs-keyword\">const</span> uniqueYears = unique(data, <span class=\"hljs-string\">&#x27;year&#x27;</span>, <span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-comment\">/*\n[\n  {year: &#x27;1990&#x27;, x: 0, y: 1},\n  {year: &#x27;1991&#x27;, x: 2, y: 5},\n  {year: &#x27;1992&#x27;, x: 1, y: 6},\n  {year: &#x27;1993&#x27;, x: 7, y: 8}\n*/</span></code></pre></div><h3 id=\"raise\">raise<span class=\"call\">(<span class=\"arguments\">el: <code>DOM Element</code></span>)</span><a href=\"/guide#raise\"> </a></h3><p>Adapted from the <a href=\"https://github.com/d3/d3-selection#selection_raise\">raise</a> method in d3-selection, this is a convenience function to re-insert the passed in element as the last child of its parent. Equivalent to:</p>\n<div class='code-block'><pre><code>el.parentNode.appendChild(el);</code></pre></div><p>This is useful for hovering over SVG maps so that the hovered-over feature is not obstructed by neighboring shapes. See how it&#39;s used in the <a href=\"/example/MapSvg\">SVG map component</a>.</p>\n","metadata":{"title":"Helper functions"},"subsections":[{"slug":"flatten","title":"flatten(...)"},{"slug":"scalecanvas","title":"scaleCanvas(...)"},{"slug":"calcextents","title":"calcExtents(...)"},{"slug":"uniques","title":"uniques(...)"},{"slug":"raise","title":"raise(...)"}],"slug":"helper-functions","file":"99-helper-functions.md"}]