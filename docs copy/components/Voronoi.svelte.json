{"main":{"slug":"Voronoi.svelte","contents":"<script>\n  /**\n    Generates a voronoi layer using [d3-delauney](https://github.com/d3/d3-delauney).\n    @param {String} [stroke=undefined] – An optional stroke color, which is likely only useful for testing to make sure the shapes drew correctly.\n  */\n  import { getContext } from 'svelte';\n  import { uniques } from 'layercake';\n  import { Delaunay } from 'd3-delaunay';\n\n  const { data, xGet, yGet, width, height } = getContext('LayerCake');\n\n  export let stroke = undefined;\n\n  function log (point) {\n    console.log(point, point.data);\n  }\n\n  $: points = $data.map(d => {\n    const point = [$xGet(d), $yGet(d)];\n    point.data = d;\n    return point;\n  });\n\n  $: uniquePoints = uniques(points, d => d.join(), false);\n\n  $: voronoi = Delaunay.from(points).voronoi([0, 0, $width, $height]);\n\n</script>\n\n<style>\n  .voronoi-cell {\n    fill: none;\n    stroke: none;\n    pointer-events: all;\n  }\n\n  /* Useful to testing but you'll want to disable this for production */\n  .voronoi-cell:hover {\n    stroke: #000;\n  }\n</style>\n\n{#each uniquePoints as point, i}\n  <path\n    style=\"{stroke ? `stroke:${stroke};` : ''}\"\n    class=\"voronoi-cell\"\n    d={voronoi.renderCell(i)}\n    on:mouseover=\"{log(point)}\"\n    on:focus=\"{log(point)}\"\n  ></path>\n{/each}"},"dek":"","usedIn":[{"group":"Regular","matches":["/example/Scatter"]},{"group":"SSR","matches":[]}],"jsdocParsed":{"description":"Generates a voronoi layer using [d3-delauney](https://github.com/d3/d3-delauney).","tags":[{"title":"param","description":"– An optional stroke color, which is likely only useful for testing to make sure the shapes drew correctly.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"stroke","default":"undefined"}]}}