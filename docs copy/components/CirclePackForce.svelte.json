{"main":{"slug":"CirclePackForce.svelte","contents":"<script>\n  /**\n    Generates an SVG force simulation using [d3-force](https://github.com/d3/d3-force). The values here are defaults which you will likely have to customize because every force simulation is different.\n    @param {Number} [manyBodyStrength=5] – The value passed into the `.strength` method on `forceManyBody`, which is used as the `'charge'` property on the simulation. See [the documentation](https://github.com/d3/d3-force#manyBody_strength) for more.\n    @param {Number} [xStrength=0.1] – The value passed into the `.strength` method on `forceX`, which is used as the `'x'` property on the simulation. See [the documentation](https://github.com/d3/d3-force#x_strength) for more.\n    @param {String} [nodeColor=undefined] Set a color manually otherwise it will default to the `zScale`.\n    @param {String} [nodeStroke='#fff'] – The circle's stroke color.\n    @param {Number} [nodeStrokeWidth=1] – The circle's stroke width, in pixels.\n    @param {Boolean} [groupBy=true] – Group the nodes by the return value of the x-scale. If `false`, align all the nodes to the canvas center.\n  */\n  import { getContext } from 'svelte';\n  import {\n    forceSimulation,\n    forceX,\n    forceManyBody,\n    forceCollide,\n    forceCenter,\n  } from 'd3-force';\n\n  const { data, width, height, xScale, xGet, rGet, zGet } = getContext('LayerCake');\n\n  export let manyBodyStrength = 5;\n  export let xStrength = 0.1;\n  export let nodeColor = undefined;\n  export let nodeStroke = '#fff';\n  export let nodeStrokeWidth = 1;\n  export let groupBy = true;\n\n  /* --------------------------------------------\n   * Make a copy because the simulation will alter the objects\n   */\n  const initialNodes = $data.map((d) => ({ ...d }));\n\n  const simulation = forceSimulation(initialNodes)\n\n  let nodes = [];\n\n  simulation.on(\"tick\", () => {\n    nodes = simulation.nodes()\n  })\n\n  /* ----------------------------------------------\n   * When variables change, set forces and restart the simulation\n   */\n  $: {\n    simulation\n      .force('x', forceX().x(d => {\n        return groupBy === true ? $xGet(d) + $xScale.bandwidth() / 2 : $width / 2;\n      }).strength(xStrength))\n      .force('center', forceCenter($width / 2, $height / 2))\n      .force('charge', forceManyBody().strength(manyBodyStrength))\n      .force('collision', forceCollide().radius(d => {\n        return $rGet(d) + nodeStrokeWidth / 2; // Divide this by two because an svg stroke is drawn halfway out\n      }))\n      .force('center', forceCenter($width / 2, $height / 2))\n      .alpha(1)\n      .restart()\n  }\n\n</script>\n  {#each nodes as point}\n    <circle\n      class='node'\n      r={$rGet(point)}\n      fill={nodeColor || $zGet(point)}\n      stroke={nodeStroke}\n      stroke-width={nodeStrokeWidth}\n      cx='{point.x}'\n      cy='{point.y}'\n    >\n      <!-- <title>{point[$custom.title]}</title> -->\n    </circle>\n  {/each}"},"dek":"","usedIn":[{"group":"Regular","matches":["/example/CirclePackForce"]},{"group":"SSR","matches":[]}],"jsdocParsed":{"description":"Generates an SVG force simulation using [d3-force](https://github.com/d3/d3-force). The values here are defaults which you will likely have to customize because every force simulation is different.","tags":[{"title":"param","description":"– The value passed into the `.strength` method on `forceManyBody`, which is used as the `'charge'` property on the simulation. See [the documentation](https://github.com/d3/d3-force#manyBody_strength) for more.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"manyBodyStrength","default":"5"},{"title":"param","description":"– The value passed into the `.strength` method on `forceX`, which is used as the `'x'` property on the simulation. See [the documentation](https://github.com/d3/d3-force#x_strength) for more.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"xStrength","default":"0.1"},{"title":"param","description":"Set a color manually otherwise it will default to the `zScale`.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"nodeColor","default":"undefined"},{"title":"param","description":"– The circle's stroke color.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"String"}},"name":"nodeStroke","default":"'#fff'"},{"title":"param","description":"– The circle's stroke width, in pixels.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"nodeStrokeWidth","default":"1"},{"title":"param","description":"– Group the nodes by the return value of the x-scale. If `false`, align all the nodes to the canvas center.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Boolean"}},"name":"groupBy","default":"true"}]}}