{"main":{"slug":"AxisY.html.svelte","contents":"<script>\n  /**\n    Generates an HTML y-axis.\n    @param {Boolean} [gridlines=true] – Extend lines from the ticks into the chart space\n    @param {Boolean} [tickMarks=false] – Show a vertical mark for each tick.\n    @param {Boolean} [baseline=false] – Show a solid line at the bottom.\n    @param {Function} [formatTick=d => d] – A function that passes the current tick value and expects a nicely formatted value in return.\n    @param {Number|Array|Function} [ticks=4] – If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return.\n    @param {Number} [xTick=-4] – How far over to position the text marker.\n    @param {Number} [yTick=-1] – How far up and down to position the text marker.\n  */\n  import { getContext } from 'svelte';\n\n  const { padding, xRange, yScale } = getContext('LayerCake');\n\n  export let gridlines = true;\n  export let tickMarks = false;\n  export let baseline = false;\n  export let formatTick = d => d;\n  export let ticks = 4;\n  export let xTick = -4;\n  export let yTick = -1;\n  // export let textAnchor = 'start';\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $yScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($yScale.ticks()) :\n          $yScale.ticks(ticks);\n</script>\n\n<div class='axis y-axis' style='transform:translate(-{$padding.left}px, 0)'>\n  {#each tickVals as tick, i}\n    <div class='tick tick-{i}' style='top:{$yScale(tick) + (isBandwidth ? $yScale.bandwidth () / 2 : 0)}%;left:{$xRange[0]}%;'>\n      {#if gridlines !== false}\n        <div class=\"gridline\" style='top:0;left:{isBandwidth ? $padding.left : 0}px;right:-{$padding.left + $padding.right}px;'></div>\n      {/if}\n      {#if baseline !== false && i === 0}\n        <div class=\"gridline baseline\" style='top:0;left:{isBandwidth ? $padding.left : 0};right:-{$padding.left + $padding.right}px;'></div>\n      {/if}\n      {#if tickMarks === true}\n        <div class=\"tick-mark\" style='top:0;left:{isBandwidth ? $padding.left - 6 : 0}px;width:6px;'></div>\n      {/if}\n      <div\n        class=\"text\"\n        style='\n          top:{yTick}px;\n          left:{isBandwidth ? ($padding.left + xTick - 4) : 0}px;\n          transform: translate({isBandwidth ? '-100%' : 0}, {isBandwidth ? -50 - Math.floor($yScale.bandwidth() / -2) : '-100'}%);\n        '\n      >{formatTick(tick)}</div>\n    </div>\n  {/each}\n</div>\n\n<style>\n  .axis,\n  .tick,\n  .tick-mark,\n  .gridline,\n  .baseline,\n  .text {\n    position: absolute;\n  }\n  .axis {\n    width: 100%;\n    height: 100%;\n  }\n  .tick {\n    font-size: 12px;\n    width: 100%;\n    font-weight: 100;\n  }\n\n  .gridline {\n    border-top: 1px dashed #aaa;\n  }\n  .tick-mark {\n    border-top: 1px solid #aaa;\n  }\n\n  .baseline.gridline {\n    border-top-style: solid;\n  }\n\n  .tick .text {\n    color: #666;\n  }\n</style>"},"dek":"","usedIn":[{"group":"Regular","matches":[]},{"group":"SSR","matches":["/example-ssr/AreaStacked","/example-ssr/Bar","/example-ssr/BarStacked","/example-ssr/Brush","/example-ssr/ClevelandDotPlot","/example-ssr/Column","/example-ssr/ColumnStacked","/example-ssr/Histogram","/example-ssr/Line","/example-ssr/MultiLine","/example-ssr/Scatter","/example-ssr/ScatterWebgl","/example-ssr/Timeplot"]}],"jsdocParsed":{"description":"Generates an HTML y-axis.","tags":[{"title":"param","description":"– Extend lines from the ticks into the chart space","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Boolean"}},"name":"gridlines","default":"true"},{"title":"param","description":"– Show a vertical mark for each tick.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Boolean"}},"name":"tickMarks","default":"false"},{"title":"param","description":"– Show a solid line at the bottom.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Boolean"}},"name":"baseline","default":"false"},{"title":"param","description":"– A function that passes the current tick value and expects a nicely formatted value in return.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"formatTick","default":"d=>d"},{"title":"param","description":"– If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return.","type":{"type":"OptionalType","expression":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Number"},{"type":"NameExpression","name":"Array"},{"type":"NameExpression","name":"Function"}]}},"name":"ticks","default":"4"},{"title":"param","description":"– How far over to position the text marker.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"xTick","default":"-4"},{"title":"param","description":"– How far up and down to position the text marker.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"yTick","default":"-1"}]}}