{"main":{"slug":"AxisY.svelte","contents":"<script>\n  /**\n    Generates an HTML y-axis.\n    @param {Boolean} [gridlines=true] – Extend lines from the ticks into the chart space\n    @param {Boolean} [tickMarks=false] – Show a vertical mark for each tick.\n    @param {Function} [formatTick=d => d] – A function that passes the current tick value and expects a nicely formatted value in return.\n    @param {Number|Array|Function} [ticks=4] – If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return.\n    @param {Number} [xTick=0] – How far over to position the text marker.\n    @param {Number} [dxTick=0] – Any optional value passed to the `dx` attribute on the text marker and tick mark (if visible). This is ignored on the text marker if your scale is ordinal.\n    @param {Number} [yTick=0] – How far up and down to position the text marker.\n    @param {Number} [dyTick=0] – Any optional value passed to the `dy` attribute on the text marker and tick mark (if visible). This is ignored on the text marker if your scale is ordinal.\n  */\n  import { getContext } from 'svelte';\n\n  const { padding, xRange, yScale } = getContext('LayerCake');\n\n  export let gridlines = true;\n  export let tickMarks = false;\n  export let formatTick = d => d;\n  export let ticks = 4;\n  export let xTick = 0;\n  export let yTick = 0;\n  export let dxTick = 0;\n  export let dyTick = -4;\n  export let textAnchor = 'start';\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $yScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($yScale.ticks()) :\n          $yScale.ticks(ticks);\n</script>\n\n<g class='axis y-axis' transform='translate({-$padding.left}, 0)'>\n  {#each tickVals as tick}\n    <g class='tick tick-{tick}' transform='translate({$xRange[0] + (isBandwidth ? $padding.left : 0)}, {$yScale(tick)})'>\n      {#if gridlines !== false}\n        <line\n          class=\"gridline\"\n          x2='100%'\n          y1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n          y2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n        ></line>\n      {/if}\n      {#if tickMarks === true}\n        <line\n          class='tick-mark'\n          x1='0'\n          x2='{isBandwidth ? -6 : 6}'\n          y1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n          y2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n        ></line>\n      {/if}\n      <text\n        x='{xTick}'\n        y='{yTick + (isBandwidth ? $yScale.bandwidth() / 2 : 0)}'\n        dx='{isBandwidth ? -9 : dxTick}'\n        dy='{isBandwidth ? 4 : dyTick}'\n        style=\"text-anchor:{isBandwidth ? 'end' : textAnchor};\"\n      >{formatTick(tick)}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n  }\n  .tick .gridline {\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>"},"dek":"","usedIn":[{"group":"Regular","matches":["/example/AreaStacked","/example/Bar","/example/BarStacked","/example/Brush","/example/ClevelandDotPlot","/example/Column","/example/ColumnStacked","/example/Histogram","/example/Line","/example/MultiLine","/example/Scatter","/example/ScatterWebgl","/example/Timeplot"]},{"group":"SSR","matches":[]}],"jsdocParsed":{"description":"Generates an HTML y-axis.","tags":[{"title":"param","description":"– Extend lines from the ticks into the chart space","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Boolean"}},"name":"gridlines","default":"true"},{"title":"param","description":"– Show a vertical mark for each tick.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Boolean"}},"name":"tickMarks","default":"false"},{"title":"param","description":"– A function that passes the current tick value and expects a nicely formatted value in return.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Function"}},"name":"formatTick","default":"d=>d"},{"title":"param","description":"– If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return.","type":{"type":"OptionalType","expression":{"type":"UnionType","elements":[{"type":"NameExpression","name":"Number"},{"type":"NameExpression","name":"Array"},{"type":"NameExpression","name":"Function"}]}},"name":"ticks","default":"4"},{"title":"param","description":"– How far over to position the text marker.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"xTick","default":"0"},{"title":"param","description":"– Any optional value passed to the `dx` attribute on the text marker and tick mark (if visible). This is ignored on the text marker if your scale is ordinal.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"dxTick","default":"0"},{"title":"param","description":"– How far up and down to position the text marker.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"yTick","default":"0"},{"title":"param","description":"– Any optional value passed to the `dy` attribute on the text marker and tick mark (if visible). This is ignored on the text marker if your scale is ordinal.","type":{"type":"OptionalType","expression":{"type":"NameExpression","name":"Number"}},"name":"dyTick","default":"0"}]}}