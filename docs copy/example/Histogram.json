{"main":{"title":"index.svelte","contents":"<script>\n  import { LayerCake, Svg } from 'layercake';\n  import { histogram, extent } from 'd3-array';\n\n  import Column from './components/Column.svelte';\n  import AxisX from './components/AxisX.svelte';\n  import AxisY from './components/AxisY.svelte';\n  import thresholds from './modules/thresholds.js';\n\n  import data from './data/unemployment.js';\n\n  const xKey = ['x0', 'x1'];\n  const yKey = 'length';\n  let binCount = 40;\n\n  const domain = extent(data);\n\n  $: hist = histogram()\n    .domain(domain)\n    .thresholds(thresholds(domain, binCount));\n\n  $: bins = hist(data);\n</script>\n\n<style>\n  /*\n    The wrapper div needs to have an explicit width and height in CSS.\n    It can also be a flexbox child or CSS grid element.\n    The point being it needs dimensions since the <LayerCake> element will\n    expand to fill it.\n  */\n  .chart-container {\n    width: 100%;\n    height: 100%;\n  }\n  input {\n    height: auto;\n  }\n</style>\n\n<div class=\"input-container\" style=\"position: absolute;right:10px;z-index: 9;\">\n  <input\n    style=\"margin:0;\"\n    type=\"range\"\n    min=\"4\"\n    max=\"100\"\n    step=\"4\"\n    bind:value={binCount}\n  /> <span class=\"counter-container\" style=\"display:inline-block;vertical-align:top;width: 70px;text-align:right;\">{binCount} bins</span>\n</div>\n\n<div class=\"chart-container\">\n  <LayerCake\n    padding={{ top: 20, right: 5, bottom: 20, left: 30 }}\n    x={xKey}\n    y={yKey}\n    yDomain={[0, null]}\n    data={bins}\n  >\n    <Svg>\n      <AxisX\n        gridlines={false}\n        baseline={true}\n        snapTicks={true}\n      />\n      <AxisY\n        gridlines={false}\n        ticks={3}\n      />\n      <Column\n        fill={'#fff'}\n        stroke={'#000'}\n        strokeWidth={1}\n      />\n    </Svg>\n  </LayerCake>\n</div>"},"dek":"","components":[{"title":"./components/Column.svelte","contents":"<script>\n  /**\n    Generates an SVG column chart\n    @param {String} [fill='#00e047'] – The shape's fill color.\n    @param {String} [stroke='#000'] – The shape's stroke color.\n    @param {Number} [strokeWidth=0] – The shape's stroke width.\n  */\n  import { getContext } from 'svelte';\n\n  const { data, xGet, yGet, yRange, xScale } = getContext('LayerCake');\n\n  $: columnWidth = d => {\n    const vals = $xGet(d);\n    return Math.max(0, (vals[1] - vals[0]));\n  };\n\n  $: columnHeight = d => {\n    return $yRange[0] - $yGet(d);\n  };\n\n  /* --------------------------------------------\n   * Default styles\n   */\n  export let fill = '#00e047';\n  export let stroke = '#000';\n  export let strokeWidth = 0;\n\n</script>\n\n<g class=\"column-group\">\n  {#each $data as d, i}\n    <rect\n      class='group-rect'\n      data-id=\"{i}\"\n      x=\"{$xScale.bandwidth ? $xGet(d) : $xGet(d)[0]}\"\n      y=\"{$yGet(d)}\"\n      width=\"{$xScale.bandwidth ? $xScale.bandwidth() : columnWidth(d)}\"\n      height=\"{columnHeight(d)}\"\n      {fill}\n      {stroke}\n      stroke-width=\"{strokeWidth}\"\n    />\n  {/each}\n</g>"},{"title":"./components/AxisX.svelte","contents":"<script>\n  /**\n    Generates an SVG x-axis. This component is also configured to detect if your x-scale is an ordinal scale. If so, it will place the markers in the middle of the bandwidth.\n    @param {Boolean} [gridlines=true] – Extend lines from the ticks into the chart space\n    @param {Boolean} [tickMarks=false] – Show a vertical mark for each tick.\n    @param {Boolean} [baseline=false] – Show a solid line at the bottom.\n    @param {Boolean} [snapTicks=false] – Instead of centering the text on the first and the last items, align them to the edges of the chart.\n    @param {Function} [formatTick=d => d] – A function that passes the current tick value and expects a nicely formatted value in return.\n    @param {Number|Array|Function} [ticks] – If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return. If nothing, it uses the default ticks supplied by the D3 function.\n    @param {Number} [xTick=0] – TK\n    @param {Number} [yTick=16] – The distance from the baseline to place each tick value.\n  */\n  import { getContext } from 'svelte';\n\n  const { width, height, xScale, yRange } = getContext('LayerCake');\n\n  export let gridlines = true;\n  export let tickMarks = false;\n  export let baseline = false;\n  export let snapTicks = false;\n  export let formatTick = d => d;\n  export let ticks = undefined;\n  export let xTick = 0;\n  export let yTick = 16;\n\n  $: isBandwidth = typeof $xScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $xScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($xScale.ticks()) :\n          $xScale.ticks(ticks);\n\n  function textAnchor(i) {\n    if (snapTicks === true) {\n      if (i === 0) {\n        return 'start';\n      }\n      if (i === tickVals.length - 1) {\n        return 'end';\n      }\n    }\n    return 'middle';\n  }\n</script>\n\n<g class='axis x-axis' class:snapTicks>\n  {#each tickVals as tick, i}\n    <g class='tick tick-{ i }' transform='translate({$xScale(tick)},{$yRange[0]})'>\n      {#if gridlines !== false}\n        <line class=\"gridline\" y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n      {/if}\n      {#if tickMarks === true}\n        <line class=\"tick-mark\" y1='{0}' y2='{6}' x1='{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0}' x2='{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0}'></line>\n      {/if}\n      <text\n        x=\"{xTick || isBandwidth ? $xScale.bandwidth() / 2 : 0}\"\n        y='{yTick}'\n        dx=''\n        dy=''\n        text-anchor='{textAnchor(i)}'>{formatTick(tick)}</text>\n    </g>\n  {/each}\n  {#if baseline === true}\n    <line class=\"baseline\" y1='{$height + 0.5}' y2='{$height + 0.5}' x1='0' x2='{$width}'></line>\n  {/if}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick .tick-mark,\n  .baseline {\n    stroke-dasharray: 0;\n  }\n  /* This looks slightly better */\n  .axis.snapTicks .tick:last-child text {\n    transform: translateX(3px);\n  }\n  .axis.snapTicks .tick.tick-0 text {\n    transform: translateX(-3px);\n  }\n</style>"},{"title":"./components/AxisY.svelte","contents":"<script>\n  /**\n    Generates an HTML y-axis.\n    @param {Boolean} [gridlines=true] – Extend lines from the ticks into the chart space\n    @param {Boolean} [tickMarks=false] – Show a vertical mark for each tick.\n    @param {Function} [formatTick=d => d] – A function that passes the current tick value and expects a nicely formatted value in return.\n    @param {Number|Array|Function} [ticks=4] – If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return.\n    @param {Number} [xTick=0] – How far over to position the text marker.\n    @param {Number} [dxTick=0] – Any optional value passed to the `dx` attribute on the text marker and tick mark (if visible). This is ignored on the text marker if your scale is ordinal.\n    @param {Number} [yTick=0] – How far up and down to position the text marker.\n    @param {Number} [dyTick=0] – Any optional value passed to the `dy` attribute on the text marker and tick mark (if visible). This is ignored on the text marker if your scale is ordinal.\n  */\n  import { getContext } from 'svelte';\n\n  const { padding, xRange, yScale } = getContext('LayerCake');\n\n  export let gridlines = true;\n  export let tickMarks = false;\n  export let formatTick = d => d;\n  export let ticks = 4;\n  export let xTick = 0;\n  export let yTick = 0;\n  export let dxTick = 0;\n  export let dyTick = -4;\n  export let textAnchor = 'start';\n\n  $: isBandwidth = typeof $yScale.bandwidth === 'function';\n\n  $: tickVals = Array.isArray(ticks) ? ticks :\n    isBandwidth ?\n      $yScale.domain() :\n      typeof ticks === 'function' ?\n        ticks($yScale.ticks()) :\n          $yScale.ticks(ticks);\n</script>\n\n<g class='axis y-axis' transform='translate({-$padding.left}, 0)'>\n  {#each tickVals as tick}\n    <g class='tick tick-{tick}' transform='translate({$xRange[0] + (isBandwidth ? $padding.left : 0)}, {$yScale(tick)})'>\n      {#if gridlines !== false}\n        <line\n          class=\"gridline\"\n          x2='100%'\n          y1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n          y2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n        ></line>\n      {/if}\n      {#if tickMarks === true}\n        <line\n          class='tick-mark'\n          x1='0'\n          x2='{isBandwidth ? -6 : 6}'\n          y1={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n          y2={yTick + (isBandwidth ? ($yScale.bandwidth() / 2) : 0)}\n        ></line>\n      {/if}\n      <text\n        x='{xTick}'\n        y='{yTick + (isBandwidth ? $yScale.bandwidth() / 2 : 0)}'\n        dx='{isBandwidth ? -9 : dxTick}'\n        dy='{isBandwidth ? 4 : dyTick}'\n        style=\"text-anchor:{isBandwidth ? 'end' : textAnchor};\"\n      >{formatTick(tick)}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n  }\n  .tick .gridline {\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>"}],"modules":[{"title":"./modules/thresholds.js","contents":"export default function thresholds (domain, count) {\n  const breaks = [domain[0]];\n  const brek = (domain[1] - domain[0]) / count;\n  while (breaks[breaks.length - 1] < domain[1]) {\n    const node = breaks[breaks.length - 1] + brek;\n    breaks.push(node);\n  }\n  return breaks;\n}"},{"title":"./data/unemployment.js","contents":"export default [5.1,4.9,8.6,6.2,5.1,7.1,6.7,6.1,5,5,5.2,7.9,11.1,5.9,5.5,5.6,6.5,7.7,5.7,6.7,5.7,4.8,5.6,9.5,5.7,4.7,6.3,5.7,6.6,5.5,5.4,9.3,7.6,6.3,5.6,5.9,5.5,5.2,6,6.4,4.9,5,10.3,7.2,4.9,6.9,6.1,5.1,6.5,8.6,5.6,5.2,10.9,6.7,6.4,5.7,5.3,5,4.2,7.3,6.4,5.1,5.5,7.2,8.3,13.9,7,1.9,2.2,5,14.1,5.6,3.2,8.1,4.9,5.9,7.3,3.6,6.9,4.4,4.8,21.7,9.2,7.4,13.6,6.9,16.5,5.7,9.4,3,3,8.7,5.4,5.4,5.8,16.4,11.8,6.5,6.4,7.6,7.3,7.7,6.6,4.9,7,8.5,5.4,5.9,13,5,24.4,3.2,6.3,4.1,2.7,3.3,5.9,5.1,2.8,6,4.5,5,5.7,4.4,5.7,5.9,3.1,3.7,4.4,3.9,5,5.1,5.7,3.7,3.9,3.9,4,3.2,4,3.7,3.6,3.4,5,5.3,5.9,5.9,4.8,6.2,4.5,4.5,4.9,5.1,4.4,3.2,3,3.8,4.3,7.1,4.5,4.6,3.7,3.6,5.6,4.4,5.5,3.8,4.1,4.7,4.7,3.7,3.5,4.6,5,3,3.7,4.3,3.5,4.8,5.2,4.8,5.6,6.4,2.6,4.8,5.3,4.4,4.6,7.3,5.7,6.6,5.7,10,4.7,7.3,5.1,8.7,7.9,5.1,26.4,4.9,9.7,8.9,6.3,6.1,5.3,8.2,3.5,5.4,5,9.2,6.6,5.2,5.6,4,4.8,4.3,4.7,7.1,6.9,5.7,6.2,6.2,5,3.5,7.7,4.5,3.2,4.8,4,5.7,6.8,6.6,7.1,5.7,4.1,7.9,7.9,7.4,5.9,10.6,6.1,5.7,5.5,8,3.6,4.3,3.2,3.1,1.8,3.1,2.9,3.1,2.4,2.7,3.3,4.9,4.8,3.6,3,4.7,3.2,4.1,2.8,2.5,2.6,3.9,5.1,3.3,2.6,2.3,2.1,2,6.2,2.3,3.1,2.1,1.8,2.6,2.9,2.9,5,2.5,3.3,5.3,1.7,3.6,4.5,3.9,3.5,4.6,3.2,2.7,2.3,2.7,3.5,4.9,5.1,5.1,2.6,5.9,2.4,2.4,2.2,2.1,3.7,2.1,3.5,2.2,5.2,6,4.8,4.8,6.1,5.4,4.8,5.8,5.1,4.5,3.7,6.5,4.4,4.7,4.6,4.2,5.2,4.6,5.9,5.3,6.8,4.4,5.3,4.8,6.1,5.3,5.1,5,5.4,4.1,6.3,5.1,6.9,4.3,4.4,7.2,11.5,6,6.9,4.5,5.6,6.6,5.4,5.3,3.8,4.7,4.7,4.7,5.2,5.4,5.3,4.6,5.9,5,5.6,3.1,4.6,3.9,5.8,4.3,5,5.1,5.1,4.3,5.8,6,3.6,6,4.6,4.5,4.2,6.7,5.1,5.5,4.6,5,4.1,4.1,5,6.9,4.6,5.2,8.3,7.2,4.8,4.6,5,8.1,6.1,5.7,7.6,6.6,4.8,4.8,5.6,7.5,5.2,6,5.7,4.7,5.9,4.8,5.8,5,8.6,6.1,4.1,5.4,9.6,6.4,6,4.4,5.6,5.3,4.8,5.2,4.9,5.5,5.9,5.1,4.5,6.5,5.2,7,5.5,6.8,5.3,6.7,4.5,4.7,6.2,7.4,4.8,5,4.7,5.9,4.1,5.5,5.2,5.4,6.3,5,5.3,5.4,5.9,4.6,5,4.4,8.9,5.6,4.7,5.3,5.8,5.4,5.3,7.3,4.1,4.7,6.3,7,7.1,6,4.6,6.4,5.3,6.4,4.8,5.7,5.7,5.6,5.2,5,7.2,5.5,7.6,4.7,6.9,6.8,5.5,6.3,4.9,7.1,4.8,6.6,6.6,5.8,4,4.5,4.5,6.4,4.8,5.3,5.1,5.7,5.6,6.8,7.7,5.4,8.6,6.5,5.5,6.4,6.9,7.5,6.5,5.9,5.8,7.4,6.6,6.6,5.4,7,7.7,6,6.3,5.6,7.3,6.3,7.3,5,6.4,8.2,4.5,6.2,5.3,4.7,5.4,7,6.3,6.6,8.6,8.5,4.4,5.7,6.8,6.7,6,5.8,4.1,3,3.4,3.4,3.5,4.9,3.6,3.4,4.6,3.7,2.8,4.9,4.3,3.2,4.1,3.7,2.6,4.4,3.2,2.9,3.3,5.9,4.1,4.2,2.9,3.2,4.3,3,4.8,3.1,2.8,4,3.2,4.8,6.9,3.6,2.9,3.1,3.1,3.1,3.7,4.1,4.2,5.9,2,3.4,4.2,5.3,4.7,9.5,4.7,5.8,3.2,5.8,5.7,4.8,4.8,5,5.8,5.5,6.4,4.1,6,5.7,5.6,5,5,5.6,4.6,4.4,6.1,5.2,4.5,6,5.3,8,6.9,7.6,5.3,5.9,6.1,6.9,8.1,5.8,5.4,4.9,5.5,6.2,6.5,5.5,4.4,8.3,5.1,6.1,4.7,5.6,4.8,6.2,7.6,4.8,5.2,5.1,6.8,4.6,5.1,6.6,5.5,6,6.2,5.9,7.1,7.4,3.9,5.3,3.9,6.3,4.6,4.5,5.3,6.6,6.9,4.8,4.4,6.8,8.6,5.2,4.8,5.8,6,6.2,8.1,4.6,4.9,4.3,5.6,6.7,5.6,6,7.1,7.1,6.5,5.2,3.8,8.4,6.2,5.8,5.4,6.2,6.4,4.9,3.8,4.3,3.6,4.3,5.7,3.6,3.8,4.4,4.7,4.4,5,4,5.6,3.6,4.7,3.6,4.2,5.5,3.3,4,5.9,4.4,5.9,4.2,4.8,3.8,5.1,6.6,3.4,4,4.4,3.6,4.7,4.8,4.2,4,5.1,4.7,5,4.8,3.8,4.5,4,3.7,6.6,6,5.6,4.9,4.7,3.9,4.1,4.8,5.1,4.1,4.2,5.3,4.2,4.9,5.2,5.4,5.1,4.9,4.6,5.3,4.3,4.6,4.5,4.5,4.5,4,5,4.9,4,4.2,5.2,3.8,6.1,5.3,4.3,3.8,4.2,4.4,6.5,5.7,4.5,5,4.4,4.6,4.9,3.6,3.9,4,3.4,2.9,4.9,5.7,3.7,4,5.8,3.4,4.2,4.6,4.4,4.5,4.7,3.1,3,3.8,4.4,4.1,4.6,3.4,4.1,4.2,6.1,5.2,3.2,5.3,3.5,3.7,5.9,3.5,4,4.2,5,3.9,3.8,4.1,4.3,3.7,3.6,4,3,4.2,3.7,4.4,3.6,3.2,2.8,3.2,4.5,4,4.6,3.2,4.4,5.1,3,8.1,4.3,4.5,3.8,2.3,3.7,4.3,3.4,4.9,4,3,4.6,5.4,4.2,4.4,3,3.1,6.4,3.9,2.9,3.4,4.1,3.8,4,3.7,3,5.4,3.2,2.4,2.9,4.2,3.9,4.4,4.9,7.4,3.8,3.5,4.6,4.7,4.1,3.6,4.2,3.5,4.5,6.9,4.6,7.4,4.4,5,5.7,4.2,4.6,4.6,5.9,5.2,3.3,3,4.8,5.1,8.2,3.2,5.1,5.4,4.7,4.7,4.7,4.1,3.3,6.8,3.4,4.3,3.5,3.6,4.8,6.4,3,5,3.9,2.6,2.7,5.7,3.2,4,6.3,2.8,2.7,4,4.1,4.5,3.7,3.7,4.8,3.5,6.2,3.9,4.5,4,7,3.2,4.3,3.9,5.9,3.6,2.9,4.3,3.1,6.9,4.3,4.6,3,8.1,4.1,2.9,4.6,4.1,4.5,3.6,3.6,4.1,5,2.6,5.2,3.2,4.8,3.7,5.5,4.7,4.6,4,2.7,5.2,4.9,4.5,2.9,3.8,3.7,5,3.3,4.7,4.9,3.2,4.2,3.8,3.3,3.9,2.6,6.9,6.9,6.1,6.1,3.9,3.6,9,4.3,6.5,8.3,3.5,4.6,8.3,4.5,5.4,8.3,5.7,3.8,4.8,5,4.1,3.5,6.8,5,10.6,4.4,6,4.5,9.7,6.4,5.2,4.6,4,5.4,11.7,5.2,3.3,5.5,10.4,3.6,6.6,4.4,4.3,4.2,6.4,6.2,4,8.8,4.7,4.1,11.6,4.4,4.4,4.5,3.9,5.1,5.5,6.9,4.2,3.6,9.2,3.8,10.5,7.5,3.9,5.8,10.6,8.3,13.2,11.8,8.4,5.6,6.7,4.2,5.6,5.7,7.3,4.5,3.8,16.3,4.3,5.5,9,6,4.7,7.1,4.4,3.8,3.6,6,6.8,6.7,4.3,4.9,6.3,3.1,3.8,8.7,4.3,10.4,10.3,6.9,5,6.1,5.3,5.3,7.6,3.6,3.3,4.2,3.5,4.8,3.9,5,5.4,6.4,3.5,4,6.8,5.5,6.4,9.5,3,7.9,7.5,5.3,9,7.8,6.7,8,5.9,7.4,5.5,8.4,4.8,9.6,7.5,9.2,8,5.7,11.8,6.2,8.5,9.6,7.8,9.7,7.4,6.3,5.9,6.7,6.7,6.7,6.7,7.5,5.3,9.4,10.4,8.1,6.7,6.7,5.9,7.2,6.9,6.8,7.7,7.3,6.9,6,8.5,8.1,7.5,8.9,8.3,10.1,5.7,7.5,10.5,7.3,6.9,7.9,8.1,7.9,9.4,6.1,12,5.5,8.5,3.2,4.8,2.6,4,3.2,3.2,2.7,2.9,4.2,4,4.8,2.6,4.9,3.6,4.6,2.9,6.4,4,4.7,4.1,4.8,3.8,5.3,4.7,6.2,3.9,5.2,4.3,3.4,4.7,3.4,4.6,3.8,4.5,6.5,4,5.2,5.5,5.8,6.9,3.4,3.9,4.7,2.7,3.9,3.3,5.3,3.6,3.2,1.8,3.4,4,3.7,4.1,5.8,6.1,3.3,5,5,6.3,6.8,3.5,4.7,4.6,4.4,4.4,4.4,4.2,3.7,4,6,6,3.4,6.2,5.5,4.5,3.6,4.1,5,5.8,5.5,3.4,4.5,4.9,5.2,4.3,4,3.6,5.8,4.7,4.2,4.6,3.7,5.4,3.2,6.4,6,6.4,3.5,4.4,4.6,4.4,3.1,5.9,4.9,4.9,4.2,4.9,5.1,4.1,4.8,4.3,4.5,7.6,4.8,4.2,4.7,5,6.3,6.6,4.9,5.6,4.9,3,6.6,6.8,4.6,6.5,3.7,5.2,7,4.6,5.3,4.6,3.5,7.3,5.1,5.1,3.8,3.8,4.8,3.7,4,3.3,3.9,4.9,3.4,5.6,4,3.9,3.2,7.6,3.1,7.9,4.3,3.5,3.6,3,3.9,3.7,3.7,3.7,4.1,3.5,3.4,5.5,4.2,7.7,4,5.1,3.5,4.2,7.7,3.9,4.3,4.5,3.7,3.2,3.4,4.1,5.2,5.6,3.9,4,4.8,4.5,3,3.3,2.9,3.6,4.6,3,3.6,4.3,4.8,3,4.4,2.8,3.8,6.3,4,5.2,3.6,2.2,4.3,5.7,3.2,3.6,3.7,3.5,3.8,2.7,4.8,3.9,3,3.2,5.1,4,3.4,5.1,3.4,3.7,3.5,3.7,8.2,5,7.1,6.5,6.5,7.4,5.2,7.3,6.3,5.3,12.3,6.4,7.8,8.1,6.4,5.6,4.1,5.8,6.8,7.7,8,4.9,5.9,5.3,5.2,10.9,11.2,9.9,4.8,6.4,7.8,15.4,9.3,5.9,8.2,4.9,4.5,5.8,7.4,5.6,4.8,9,5.8,5.9,4.2,6.8,5.7,6.3,6.3,5.4,5.9,8,5.6,6.7,5.9,7,6.7,4.5,5.3,8.3,3.8,4.5,8,5.5,5.1,6.8,8.4,5.7,5.4,5.2,5.1,6.1,4.2,7.9,6.4,9.2,7.6,6.1,10.1,7.4,6,7,6.7,4.5,5.9,5.1,5.3,6,6,7.3,6.2,4.1,4.9,6.9,5.6,5.2,5.5,5.3,5.9,7.8,5,6.4,5.1,4.5,8.7,4.5,5,4.6,5.7,5.9,5.6,6.5,4.6,5.1,6.6,7.3,9.1,4.9,5,4.7,4.6,5.6,4.7,5.9,6.6,4,5.4,7.2,8.4,6,5.2,4.9,6.1,4.1,6.2,4.9,5.4,4.9,4.8,9,4.5,4.9,6,6.9,6.8,5,5,5.4,7.7,4.9,5.5,5.1,6.4,9.9,5.5,6,7,4.2,8.8,9.9,4.3,6.1,5.6,5.4,4.4,6.4,6.8,5.1,4.4,6.6,5.5,8.1,8.4,4.1,7.3,5.8,6.7,5.1,5.8,7.6,4.6,6.9,8,4.8,7.1,6,7.4,6.1,7.6,5.8,4.6,7.2,6.1,5.9,3.6,7.3,6.6,2.9,7.7,4.4,4.3,3.5,2.4,3.8,3.6,3.7,2.3,4,4.2,3.1,3.3,4.8,2.3,2.4,9,3.2,5.5,4.9,4.5,2.7,4.8,3.3,3.1,7.9,2.1,3.1,4.2,7.1,3.5,4.3,3.3,3.1,4.6,4.7,2.5,4.5,3,4.5,4.9,6.2,6.8,7,3.2,4.3,3.9,2.9,3.5,3.3,4.1,3,4.9,4.6,3.7,3.3,2.5,5.4,4.2,4.1,2.8,3.6,2.8,3.5,2.8,3.6,3.2,3.5,2.8,2.5,2.5,3.3,3,3.2,3.2,2.6,4.5,3.4,3,3.4,3.4,3.3,3.5,2.5,2.8,3.3,2.8,3.3,3.5,3.2,2.7,2.7,2.6,3.7,3.4,2.9,2.9,2.8,4.1,3.1,2.7,2.9,2.7,3.1,2.4,3,2.3,4.3,2.8,3,3.2,3,3.7,2.5,3,3.7,3.5,2.9,4.3,3,3.6,2.4,2.5,2.8,2.5,3.5,2.7,3.2,3.3,2.6,3.1,3.1,3.2,3.8,3.1,3.4,3.3,2.6,2.7,2.8,3.2,4.6,2.9,3.2,3.4,3.7,2.7,2.9,5.8,6,5.3,4.4,4.7,5.1,5.5,5.9,5.3,7.3,8.6,7.5,6,5.8,4.9,4.6,6,2.6,2.8,2.9,3.5,2.4,3.2,2.6,3.1,2.7,2.5,7.1,4.7,5,6,5.7,7.9,6.6,5.6,5.2,4.1,4.9,4.9,4.8,4.2,5.4,6.8,6.8,4.4,5,5.6,5.1,6.2,6.9,6.9,9.1,5.6,5.4,5,7.1,7.2,6.6,6.4,7.3,5.4,9.8,6,4.5,10,9.8,8,6.4,7,7.3,6.1,7.1,9.4,8.1,5.5,7.8,8,8.3,9.3,4.5,7.6,4,4.9,7.8,5,5.2,4.4,5.1,5.2,4.4,5.1,3.3,4.6,4.9,4,4.6,4.1,4.8,5.2,3.8,4.5,2.9,4.4,5.1,5.9,5.4,4.2,4.6,4.6,5.2,3.8,4.9,5.2,4.3,4.2,3.7,4.2,5.2,5.7,4.3,3.9,5,4.1,5.9,4.1,5.8,3.5,4.2,4.7,4.6,3.8,5,4.3,4.1,4.5,3.7,4.3,4.1,3.8,4.5,4.2,4.1,3.7,4.8,4.5,5.1,5.9,4.5,4.8,5.6,6.4,6.7,5.7,3.9,5.1,4.6,5.3,5.3,4.7,5.5,4.9,4.3,5.4,6.5,5.1,5.6,6.1,5.1,6.3,4.6,4.2,4.9,4.6,5.4,4.5,8.5,4.9,5.1,5.3,5.2,7.1,4.4,5,5.3,7.8,5.8,4.4,4.3,6.5,6.5,6.4,4.7,5.1,4.5,5.1,5.7,5.4,4.6,4.6,5.1,4.9,6.8,4.7,6,5.2,5,6.8,4.7,7.3,5.4,4.5,5.1,6.2,5.2,6.3,5.4,5.7,4.9,4.8,6.9,7.3,5.5,5.5,6.6,5.6,8.9,4.7,4.9,4.8,4.9,4.8,6.2,4.4,7.3,4.2,7,6.9,4.7,5.6,4.7,8.1,4.4,5.1,2.3,3.2,3.1,2.5,3.2,1.8,3.8,2.3,2,1.9,1.8,2,2.2,2.8,3.1,2.5,2.4,2.3,2.1,2.3,2.9,2.6,2,2.9,4.1,2.4,3.1,3.1,4.5,2.9,2.9,2.9,5.3,4.5,3,2.5,1.9,3.5,2.7,14.2,1.6,3.7,5.3,2.3,3.3,1.7,2.1,2,2.7,3.6,3.5,2.7,3.7,6.8,4.6,4.3,5.3,6,3.5,6.3,5,4.2,6,4.1,4.7,4.1,5.4,6,6.2,5.5,5.5,3.7,4.3,3.4,4.6,3.9,3.9,3.9,4,6.4,4.4,4.2,5.8,4.2,3.5,4.9,6.4,4.2,5.5,4.5,3.3,5,7,7.4,4.1,4.8,6.1,4.1,3.9,5.9,4.9,3.5,5.8,4.7,4.3,7.6,3,4,9.1,4.6,6.8,4.4,5.3,7.3,4.6,4.2,5.5,4.2,6.8,4.5,4.3,3.2,4.9,4.8,4.1,7,4.4,3.7,4.9,4.7,6,5,3.5,3.7,5.9,3.9,6.4,3.6,4.1,4,3.4,5.8,3.6,7.1,3.2,7.7,3.7,4.3,5.6,4.3,5.4,5.6,8.3,2.7,4,7.5,4.8,5.2,4.9,6.3,4.9,5.2,4.1,3.7,4.5,5.7,5.2,3.1,7.9,3.6,4.3,8.8,7.5,4.9,8,6.5,6.7,3.6,5.6,9.7,7.4,5.5,4.3,3.3,4.3,7.7,9.5,4.3,5.1,5.5,4.3,6,4,6.5,6.1,4.5,7.4,6.1,5.3,7.1,3.9,6.5,4.2,5,7.7,5.4,5.6,7.3,6.5,10.4,3.5,4.5,5.2,5.2,5,7.2,3.3,6.4,6.7,5,5.2,5.1,7.1,7.3,6.9,7,5.1,7.3,7.1,6.1,5.9,4,6.8,6.6,7.4,7.2,5.7,6.2,5.9,6.7,6.1,5.9,5.8,5,6,4.3,5.2,5.9,6.3,5,5.9,5,4.9,5.4,4.5,5.9,8,6.8,5.8,5.6,5.7,6.5,5.2,5.7,7.7,8.2,6.7,4.8,4.6,7.2,7.5,7.3,6.2,6.7,4.7,5.3,5.6,6.7,7.1,8.5,8.5,5.7,6.3,8.1,7.1,8.3,7.3,5.8,6.4,4.8,7,5.1,6.3,6.9,7,7.2,6.8,6,6.9,4.7,4.9,5.9,6.6,5.1,7.7,6.8,7.8,6.7,5.1,7.5,7,5.4,7.4,5.4,8,5.9,6.6,5.6,6.6,6.2,5.2,5,5.3,4.8,6.3,5,6.1,5.6,9.1,5.2,11.4,8,5.1,5,7.4,4.5,6.6,8.4,5.7,7.1,5.8,6.8,7.1,4.9,6.1,7.7,5.8,6.6,4.7,5.8,6.2,5.4,4.7,5.8,6,5.6,8.2,4.5,5.8,8.6,9.1,4.8,5.5,11.3,5.6,5.4,4.8,5.3,6.5,6.5,7.9,5.2,1.9,2.3,4,2.4,2.5,2.4,2.5,9.8,2.9,2.5,3,2.9,2.7,2.6,5.5,3.1,1.9,3.6,3.2,14.1,2.2,2.1,3.8,2.5,2.5,2.6,2.1,2.4,1.9,3.2,2.1,2,2,2.8,2.8,2.4,2.4,2.1,3,2.9,1.8,5,2.1,3.6,2.8,2.7,3.8,2.4,2.2,3.6,13.2,2.6,2.8,2.3,3.3,2.5,2.6,2,1.9,6.8,1.9,2.4,2.9,4.3,2.3,5.6,5.1,5.3,7.4,6.6,4.5,4.7,6.7,4.9,7.1,5.9,4,5.7,6.4,6.4,6,4.9,5.2,5.9,3.8,7.3,5.8,4.4,6.1,5.3,6,5.7,6.2,4.3,5.4,5.8,6.6,5.3,5,8,6.2,6.2,5.5,6.5,7,6,4.6,7.7,6.2,7.3,5.4,4.9,4.3,7.3,7.8,5.9,5.8,4.4,4.8,5.8,7.4,4.5,5.3,6.7,4.8,4.2,7.2,5.5,5.5,4.2,6.6,7.5,5.6,6.2,5.7,5.8,5.2,7.5,5.8,4.4,4,7.4,6.1,4.2,5.8,4.6,6.8,5.5,4.1,5.9,4.9,6.9,5.9,5.8,4.8,5.1,6.2,7.3,5.4,3.7,4,4.8,4.9,6.6,5.9,4.5,3.5,5.7,5.9,4.6,4.3,4.1,3.5,8.5,4.8,4.1,3.3,3.4,4.7,5.4,5.7,3.9,4.3,4.8,12.5,4.8,5.2,3.8,4.5,5.5,4.6,7.6,7.8,3.5,8.2,3.5,6.8,5.5,3.5,4.5,6,3.9,6.4,3.8,3.6,5.3,4.2,4.6,3.2,4.2,4.9,5,9.1,6.7,5.1,4.1,2.5,4.2,6,3.5,4.3,3.7,6,5.7,7.4,5.3,12.1,5.7,6.8,5.2,4.1,5.4,4.7,4.6,4.1,4.1,4.7,5.5,4.6,5.7,5.5,7.2,5.4,3.7,5.9,3.8,3.1,4.3,5.7,4.6,7.3,4,6.8,7.6,4,6.4,8.2,5.3,3.2,4.2,6.8,5.8,6.7,2.1,5.1,3.7,3.8,5.3,8.4,4.8,5.1,5,4.5,5,6.1,7,4.5,6.7,3.3,5.2,5.3,8.8,2.9,7.6,9.9,11.3,4.7,6.2,5.3,4,3.6,5.4,2.9,3.9,3.9,3.6,6.6,7.9,5.3,5.4,7.1,4.6,5.7,4.7,4.2,7.3,8.5,6.2,5.1,5.5,4.3,4.4,3.7,4.5,5.1,4.4,2.2,4.8,7.7,4.8,3.7,7.6,11.4,4.8,5,4.6,5.6,4.6,7.3,5.1,5.5,3.2,13.1,3.9,5.5,4.6,7.9,5.1,5.9,5.4,3.4,7.5,5.9,7.5,4.3,2.8,5.9,7.1,3.6,11.9,4.5,3.2,7.7,5.3,6.6,6.1,7.4,4.9,5.5,3.9,4.8,6.4,9.8,9.6,6.9,7.8,3.9,5.9,6.3,4,6.5,3.4,5.1,5.1,14.1,5.9,3.8,4.9,8.5,4.7,4.2,4,4.1,5.5,4,7.2,4.7,3.4,6.7,8.2,7.3,5,5.6,6.7,4.6,5.7,6.2,6.4,5.8,5.6,5.2,5.4,4.4,4.6,5.4,13.3,3.6,4.2,8.5,5.1,5.8,5,4.8,11.2,17.3,6.1,3.3,3,6.1,3.4,3.1,8.6,5.9,5.3,3.5,4.6,3.4,2.8,3.2,2.8,4.8,2.2,3.2,7.3,4,4.2,2.9,3.9,9.8,3.1,3,3.5,5.3,3.7,3.1,4,4.2,2.7,5.2,3.2,3.7,3.7,2.9,4.5,4,3.1,3.3,3.1,4.3,3.6,4.9,4.3,4.6,4.7,2.6,3.6,3.6,4.1,6.4,3.5,5.9,10.9,5.1,4.5,4.3,5.9,4.4,5.2,3.8,3.3,4.4,3.8,4.6,10,4.8,4.7,3.2,3.4,4.4,3.4,4.3,3.4,6.9,3.6,3.6,5.2,3.2,5.1,6.2,3.5,3.9,5.4,3,4.4,3.8,4.2,4.1,3.7,4.4,6.9,3.2,3.7,4.6,3.1,3.8,5.6,3.7,4.5,3.5,3.3,5,4.4,4,3.9,4.5,4.5,4.9,3.6,5.6,4.9,3.6,10,3.5,3.3,3.6,4.3,3.6,6.5,4.6,3.6,5.6,3.8,4.1,4,5.6,5.9,8.1,3.9,4.6,4.2,8.7,7,4,2.9,5.2,5.1,3.5,4.4,4.5,5.8,6.6,6.4,3.1,2.7,5.9,4.7,5.1,5.7,5.2,6.5,7.4,5.5,3.5,3.5,6.8,5.1,5.4,7.2,7.4,3.6,6.2,6.7,4.7,4.4,4,3.9,4.7,4,4.1,5.9,3.9,4.8,4.7,6.5,5.1,7.6,6.6,5.9,7.6,6.6,9.8,6.5,5.3,6.6,8.7,6,7.2,3.9,5.9,5.8,6.5,8.1,4.1,8.3,6.1,7.7,8.9,6.5,3.9,6.7,6.7,4.3,6.3,7.9,5.9,8.4,5.6,6.3,5.5,7.3,5.8,4,8.5,6.9,6.5,4.8,8.5,9.1,4.9,6.8,6.8,6.1,4.5,4.1,6.5,5.3,5.4,5.9,3.4,5.2,7.1,7.4,10,13.1,6,7,7,6.7,6,11.7,4.5,4.5,4.5,8.5,5.3,3.5,7.5,5.1,5.2,4.6,6.3,5.3,5.9,8.5,5.5,5.2,4.8,8.1,7,6.3,8.2,8.1,8.1,5.7,9.4,5.6,5.1,3.9,5.8,3.6,4.2,4.9,3.4,3.6,3.2,3.3,4.3,2.8,3.7,3.4,5.2,3.8,3.4,5.5,3.6,6.2,3.7,3.1,3.9,3,7,3.7,3.9,4,4.8,3.1,3.7,2.9,5.4,4.3,4.3,3.4,5.2,4.7,8.6,5.5,3.5,3.9,4.3,3.5,3.4,3.2,3.8,3.8,3.5,3.8,5.3,3.4,4.3,4.5,3.5,3.1,5.6,3.9,3.3,3.5,3.4,3.1,4.5,4,4.6,3.4,3.6,3.7,4.6,3.7,4.7,3.3,4.4,6.8,4.1,6,4,6.6,3.3,4.3,4.4,4,3.8,6.8,3.3,3.7,4.6,4,5.4,5.7,2,5.3,4.5,4.9,15.7,14.5,14.9,14.5,15.1,13,13.7,18.7,15,14.1,9.2,12.9,10.7,12.8,12.4,8.8,9.9,11.2,13.4,16.9,10.6,19.5,13.7,12.6,3.8,8.5,13.8,15.4,17.9,17.3,18.1,6.3,9.2,14.1,12.7,14.2,14.3,12.5,15.8,13.4,18.8,17.8,13.7,14.7,12.7,15,12.2,13.7,17.7,14.5,15.6,14.3,12.8,13.6,15.4,20.6,16.9,13.8,16.1,13.3,11.5,16.5,23.4,15.4,8.2,13.2,18.1,20.6,8.9,9.1,7.6,15.3,12,14.3,11.3,19.6,16.6,18];"}],"componentModules":[],"componentComponents":[],"csvs":[],"jsons":[]}